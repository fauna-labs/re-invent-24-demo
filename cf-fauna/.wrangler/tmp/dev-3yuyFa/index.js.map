{
  "version": 3,
  "sources": ["../bundle-IwrVI1/checked-fetch.js", "../../../node_modules/fauna/node_modules/base64-js/index.js", "../../../node_modules/fauna/src/client-configuration.ts", "../../../node_modules/fauna/src/errors.ts", "../../../node_modules/fauna/src/http-client/paths.ts", "../../../node_modules/fauna/src/http-client/fetch-client.ts", "../../../node_modules/fauna/src/http-client/node-http2-client.ts", "../../../node_modules/fauna/src/http-client/index.ts", "../../../node_modules/fauna/src/tagged-type.ts", "../../../node_modules/fauna/src/regex.ts", "../../../node_modules/fauna/src/values/date-time.ts", "../../../node_modules/fauna/src/values/doc.ts", "../../../node_modules/fauna/src/values/set.ts", "../../../node_modules/fauna/src/values/stream.ts", "../../../node_modules/fauna/src/query-builder.ts", "../../../node_modules/fauna/src/util/package-version.ts", "../../../node_modules/fauna/src/util/environment.ts", "../../../node_modules/fauna/src/util/retryable.ts", "../../../node_modules/fauna/src/wire-protocol.ts", "../../../node_modules/fauna/src/client.ts", "../../../src/index.ts", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-IwrVI1/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-IwrVI1/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/shadid/Documents/workspace/aws_reinvent/cf-fauna/.wrangler/tmp/dev-3yuyFa",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n", "import { HTTPClient, HTTPStreamClient } from \"./http-client\";\nimport type { ValueFormat } from \"./wire-protocol\";\n\n/**\n * Configuration for a client. The options provided are used as the\n * default options for each query.\n */\nexport interface ClientConfiguration {\n  /**\n   * Time in milliseconds beyond {@link ClientConfiguration.query_timeout_ms} at\n   * which the client will abort a request if it has not received a response.\n   * The default is 5000 ms, which should account for network latency for most\n   * clients. The value must be greater than zero. The closer to zero the value\n   * is, the more likely the client is to abort the request before the server\n   * can report a legitimate response or error.\n   */\n  client_timeout_buffer_ms?: number;\n\n  /**\n   * The {@link https://developer.mozilla.org/en-US/docs/Web/API/URL|URL} of Fauna to call. See {@link endpoints} for some default options.\n   */\n  endpoint?: URL;\n\n  /**\n   * Determines the encoded format expected for the query `arguments` field, and\n   * the `data` field of a successful response.\n   * @remarks **Note, it is very unlikely you need to change this value from its\n   * default.**\n   * The default format is \"tagged\", which specifies that the driver transmits\n   * type information over the wire. Type information allows the driver and\n   * Fauna to distinguish between types such as int\" and \"long\" which do not\n   * have a standard way of distinguishing in JSON.\n   * Rare use cases can also deal with standard JSON by setting the value to\n   * \"simple\". Note that the types enocodable in standard JSON are a subset of\n   * the types encodable in the default \"tagged\" format.\n   * It is not recommended that users use the \"simple\" format as you will lose\n   * the typing of your data. e.g. a \"Date\" will no longer be recognized by the\n   * Fauna as a \"Date\", but will instead be treated as a string.\n   */\n  format?: ValueFormat;\n\n  /**\n   * Time in milliseconds the client will keep an HTTP2 session open after all\n   * requests are completed. The default is 5000 ms.\n   */\n  http2_session_idle_ms?: number;\n\n  /**\n   * The maximum number of HTTP2 streams to execute in parallel\n   * to Fauna per HTTP2 session.\n   * Only relevant to certain HTTP2 clients.\n   * @remarks\n   * Relevant to clients using the {@link NodeHTTP2Client} provided,\n   * or any custom HTTP2Clients you implement that support this feature.\n   */\n  http2_max_streams?: number;\n\n  /**\n   * When true will keep executing a request even if the page\n   * that fired the request is no longer executing. Only relevant\n   * to underlying clients using the {@link https://fetch.spec.whatwg.org/ | Fetch standard}.\n   * By default set to false.\n   * @remarks\n   * Relevant to clients using the {@link FetchClient} provided,\n   * or any custom HTTP Clients you implement using the Fetch standard.\n   */\n  fetch_keepalive?: boolean;\n\n  /**\n   * A secret for your Fauna DB, used to authorize your queries.\n   * @see https://docs.fauna.com/fauna/current/security/keys\n   */\n  secret?: string;\n\n  // Query options\n\n  /**\n   * The timeout of each query, in milliseconds. This controls the maximum amount of\n   * time Fauna will execute your query before marking it failed. The default is 5000 ms.\n   */\n  query_timeout_ms?: number;\n\n  /**\n   * If true, unconditionally run the query as strictly serialized.\n   * This affects read-only transactions. Transactions which write\n   * will always be strictly serialized.\n   */\n  linearized?: boolean;\n\n  /**\n   * Controls what Javascript type to deserialize {@link https://docs.fauna.com/fauna/current/reference/fql_reference/types#long | Fauna longs} to.\n   * Use 'number' to deserialize longs to number. Use 'bigint' to deserialize to bigint. Defaults to 'number'.\n   * Note, for extremely large maginitude numbers Javascript's number will lose precision; as Javascript's\n   * 'number' can only support +/- 2^53-1 whereas Fauna's long is 64 bit. If this is detected, a warning will\n   * be logged to the console and precision loss will occur.\n   * If your application uses extremely large magnitude numbers use 'bigint'.\n   */\n  long_type?: \"number\" | \"bigint\";\n\n  /**\n   * The max number of times to retry the query if contention is encountered.\n   */\n  max_contention_retries?: number;\n\n  /**\n   * Tags provided back via logging and telemetry.\n   */\n  query_tags?: { [key: string]: string };\n\n  /**\n   * A traceparent provided back via logging and telemetry.\n   * Must match format: https://www.w3.org/TR/trace-context/#traceparent-header\n   */\n  traceparent?: string;\n\n  /**\n   * Enable or disable typechecking of the query before evaluation. If no value\n   * is provided, the value of `typechecked` in the database configuration will\n   * be used.\n   */\n  typecheck?: boolean;\n\n  /**\n   * Max attempts for retryable exceptions. Default is 3.\n   */\n  max_attempts?: number;\n\n  /**\n   * Max backoff between retries. Default is 20 seconds.\n   */\n  max_backoff?: number;\n}\n\n/**\n * An extensible interface for a set of Fauna endpoints.\n * @remarks Leverage the `[key: string]: URL;` field to extend to other endpoints.\n */\nexport interface Endpoints {\n  /** Fauna's default endpoint. */\n  default: URL;\n\n  /**\n   * An endpoint for interacting with local instance of Fauna (e.g. one running in a local docker container).\n   */\n  local: URL;\n\n  /**\n   * An alias for local.\n   */\n  localhost: URL;\n\n  /**\n   * Any other endpoint you want your client to support. For example, if you run all requests through a proxy\n   * configure it here. Most clients will not need to leverage this ability.\n   */\n  [key: string]: URL;\n}\n\n/**\n * Configuration for a streaming client. This typically comes from the `Client`\n * instance configuration.\n */\nexport type StreamClientConfiguration = {\n  /**\n   * The underlying {@link HTTPStreamClient} that will execute the actual HTTP calls\n   */\n  httpStreamClient: HTTPStreamClient;\n\n  /**\n   * Controls what Javascript type to deserialize {@link https://docs.fauna.com/fauna/current/reference/fql_reference/types#long | Fauna longs} to.\n   *\n   * @see {@link ClientConfiguration.long_type}\n   */\n  long_type: \"number\" | \"bigint\";\n\n  /**\n   * Max attempts for retryable exceptions.\n   */\n  max_attempts: number;\n\n  /**\n   * Max backoff between retries.\n   */\n  max_backoff: number;\n\n  /**\n   * A secret for your Fauna DB, used to authorize your queries.\n   * @see https://docs.fauna.com/fauna/current/security/keys\n   */\n  secret: string;\n\n  /**\n   * Indicates if stream should include \"status\" events, periodic events that\n   * update the client with the latest valid timestamp (in the event of a\n   * dropped connection) as well as metrics about the cost of maintaining\n   * the stream other than the cost of the received events.\n   */\n  status_events?: boolean;\n\n  /**\n   * The last seen event cursor to resume the stream from. When provided, the\n   * stream will start from the given cursor position (exclusively).\n   */\n  cursor?: string;\n};\n\n/**\n * Configuration for an event feed client.\n */\nexport type FeedClientConfiguration = Required<\n  Pick<\n    ClientConfiguration,\n    | \"long_type\"\n    | \"max_attempts\"\n    | \"max_backoff\"\n    | \"client_timeout_buffer_ms\"\n    | \"query_timeout_ms\"\n    | \"secret\"\n  >\n> & {\n  /**\n   * The underlying {@link HTTPClient} that will execute the actual HTTP calls\n   */\n  httpClient: HTTPClient;\n\n  /**\n   * The starting timestamp of the event feed, exclusive. If set, Fauna will return events starting after\n    the timestamp.\n   */\n  start_ts?: number;\n\n  /**\n   * The starting event cursor, exclusive. If set, Fauna will return events starting after the cursor.\n   */\n  cursor?: string;\n\n  /**\n   * The desired number of events per page.\n   */\n  page_size?: number;\n};\n\n/**\n * A extensible set of endpoints for calling Fauna.\n * @remarks Most clients will will not need to extend this set.\n * @example\n * ## To Extend\n * ```typescript\n *   // add to the endpoints constant\n *   endpoints.myProxyEndpoint = new URL(\"https://my.proxy.url\");\n * ```\n */\nexport const endpoints: Endpoints = {\n  default: new URL(\"https://db.fauna.com\"),\n  local: new URL(\"http://localhost:8443\"),\n  localhost: new URL(\"http://localhost:8443\"),\n};\n", "import type {\n  ConstraintFailure,\n  QueryFailure,\n  QueryInfo,\n  QueryStats,\n  QueryValue,\n} from \"./wire-protocol\";\n\n/**\n * A common error base class for all other errors.\n */\nexport abstract class FaunaError extends Error {\n  constructor(...args: any[]) {\n    super(...args);\n  }\n}\n\n/**\n * An error representing a query failure returned by Fauna.\n */\nexport class ServiceError extends FaunaError {\n  /**\n   * The HTTP Status Code of the error.\n   */\n  readonly httpStatus?: number;\n  /**\n   * A code for the error. Codes indicate the cause of the error.\n   * It is safe to write programmatic logic against the code. They are\n   * part of the API contract.\n   */\n  readonly code: string;\n  /**\n   * Details about the query sent along with the response\n   */\n  readonly queryInfo?: QueryInfo;\n  /**\n   * A machine readable description of any constraint failures encountered by the query.\n   * Present only if this query encountered constraint failures.\n   */\n  readonly constraint_failures?: Array<ConstraintFailure>;\n\n  constructor(failure: QueryFailure, httpStatus?: number) {\n    super(failure.error.message);\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ServiceError);\n    }\n\n    this.name = \"ServiceError\";\n    this.code = failure.error.code;\n    this.httpStatus = httpStatus;\n\n    const info: QueryInfo = {\n      txn_ts: failure.txn_ts,\n      summary: failure.summary,\n      query_tags: failure.query_tags,\n      stats: failure.stats,\n    };\n    this.queryInfo = info;\n\n    this.constraint_failures = failure.error.constraint_failures;\n  }\n}\n\n/**\n * An error response that is the result of the query failing during execution.\n * QueryRuntimeError's occur when a bug in your query causes an invalid execution\n * to be requested.\n * The 'code' field will vary based on the specific error cause.\n */\nexport class QueryRuntimeError extends ServiceError {\n  constructor(failure: QueryFailure, httpStatus?: number) {\n    super(failure, httpStatus);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, QueryRuntimeError);\n    }\n    this.name = \"QueryRuntimeError\";\n    // TODO trace, txn_ts, and stats not yet returned for QueryRuntimeError\n    // flip to check for those rather than a specific code.\n  }\n}\n\n/**\n * An error due to a \"compile-time\" check of the query\n * failing.\n */\nexport class QueryCheckError extends ServiceError {\n  constructor(failure: QueryFailure, httpStatus?: number) {\n    super(failure, httpStatus);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, QueryCheckError);\n    }\n    this.name = \"QueryCheckError\";\n  }\n}\n\n/**\n * An error due to an invalid request to Fauna. Either the request body was not\n * valid JSON or did not conform to the API specification\n */\nexport class InvalidRequestError extends ServiceError {\n  constructor(failure: QueryFailure, httpStatus?: number) {\n    super(failure, httpStatus);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, InvalidRequestError);\n    }\n    this.name = \"InvalidRequestError\";\n  }\n}\n\n/**\n * A runtime error due to failing schema constraints.\n */\nexport class ConstraintFailureError extends ServiceError {\n  /**\n   * The list of constraints that failed.\n   */\n  readonly constraint_failures: Array<ConstraintFailure>;\n\n  constructor(\n    failure: QueryFailure & {\n      error: { constraint_failures: Array<ConstraintFailure> };\n    },\n    httpStatus?: number,\n  ) {\n    super(failure, httpStatus);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, QueryCheckError);\n    }\n    this.name = \"ConstraintFailureError\";\n    this.constraint_failures = failure.error.constraint_failures;\n  }\n}\n\n/**\n * An error due to calling the FQL `abort` function.\n */\nexport class AbortError extends ServiceError {\n  /**\n   * The user provided value passed to the originating `abort()` call.\n   * Present only when the query encountered an `abort()` call, which is denoted\n   * by the error code `\"abort\"`\n   */\n  readonly abort: QueryValue;\n\n  constructor(\n    failure: QueryFailure & { error: { abort: QueryValue } },\n    httpStatus?: number,\n  ) {\n    super(failure, httpStatus);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, QueryCheckError);\n    }\n    this.name = \"AbortError\";\n    this.abort = failure.error.abort;\n  }\n}\n\n/**\n * AuthenticationError indicates invalid credentials were\n * used.\n */\nexport class AuthenticationError extends ServiceError {\n  constructor(failure: QueryFailure, httpStatus?: number) {\n    super(failure, httpStatus);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, AuthenticationError);\n    }\n    this.name = \"AuthenticationError\";\n  }\n}\n\n/**\n * AuthorizationError indicates the credentials used do not have\n * permission to perform the requested action.\n */\nexport class AuthorizationError extends ServiceError {\n  constructor(failure: QueryFailure, httpStatus?: number) {\n    super(failure, httpStatus);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, AuthorizationError);\n    }\n    this.name = \"AuthorizationError\";\n  }\n}\n\n/**\n * An error due to a contended transaction.\n */\nexport class ContendedTransactionError extends ServiceError {\n  constructor(failure: QueryFailure, httpStatus?: number) {\n    super(failure, httpStatus);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, InvalidRequestError);\n    }\n    this.name = \"ContendedTransactionError\";\n  }\n}\n\n/**\n * ThrottlingError indicates some capacity limit was exceeded\n * and thus the request could not be served.\n */\nexport class ThrottlingError extends ServiceError {\n  constructor(failure: QueryFailure, httpStatus?: number) {\n    super(failure, httpStatus);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ThrottlingError);\n    }\n    this.name = \"ThrottlingError\";\n  }\n}\n\n/**\n * A failure due to the query timeout being exceeded.\n *\n * This error can have one of two sources:\n *     1. Fauna is behaving expectedly, but the query timeout provided was too\n *        aggressive and lower than the query's expected processing time.\n *     2. Fauna was not available to service the request before the timeout was\n *        reached.\n *\n * In either case, consider increasing the `query_timeout_ms` configuration for\n * your client.\n */\nexport class QueryTimeoutError extends ServiceError {\n  /**\n   * Statistics regarding the query.\n   *\n   * TODO: Deprecate this `stats` field. All `ServiceError`s already provide\n   * access to stats through `queryInfo.stats`\n   */\n  readonly stats?: QueryStats;\n\n  constructor(failure: QueryFailure, httpStatus?: number) {\n    super(failure, httpStatus);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, QueryTimeoutError);\n    }\n    this.name = \"QueryTimeoutError\";\n    this.stats = failure.stats;\n  }\n}\n\n/**\n * ServiceInternalError indicates Fauna failed unexpectedly.\n */\nexport class ServiceInternalError extends ServiceError {\n  constructor(failure: QueryFailure, httpStatus?: number) {\n    super(failure, httpStatus);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ServiceInternalError);\n    }\n    this.name = \"ServiceInternalError\";\n  }\n}\n\n/**\n * An error representing a failure internal to the client, itself.\n * This indicates Fauna was never called - the client failed internally\n * prior to sending the request.\n */\nexport class ClientError extends FaunaError {\n  constructor(message: string, options?: { cause: any }) {\n    super(message, options);\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ClientError);\n    }\n    this.name = \"ClientError\";\n  }\n}\n\n/**\n * An error thrown if you try to call the client after it has been closed.\n */\nexport class ClientClosedError extends FaunaError {\n  constructor(message: string, options?: { cause: any }) {\n    super(message, options);\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ClientClosedError);\n    }\n    this.name = \"ClientClosedError\";\n  }\n}\n\n/**\n * An error representing a failure due to the network.\n * This indicates Fauna was never reached.\n */\nexport class NetworkError extends FaunaError {\n  constructor(message: string, options: { cause: any }) {\n    super(message, options);\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, NetworkError);\n    }\n    this.name = \"NetworkError\";\n  }\n}\n\n/**\n * An error representing a HTTP failure - but one not directly\n * emitted by Fauna.\n */\nexport class ProtocolError extends FaunaError {\n  /**\n   * The HTTP Status Code of the error.\n   */\n  readonly httpStatus: number;\n\n  constructor(error: { message: string; httpStatus: number }) {\n    super(error.message);\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ProtocolError);\n    }\n\n    this.name = \"ProtocolError\";\n    this.httpStatus = error.httpStatus;\n  }\n}\n\nexport const getServiceError = (\n  failure: QueryFailure,\n  httpStatus?: number,\n): ServiceError => {\n  const failureCode = failure.error.code;\n\n  switch (failureCode) {\n    case \"invalid_query\":\n      return new QueryCheckError(failure, httpStatus);\n\n    case \"invalid_request\":\n      return new InvalidRequestError(failure, httpStatus);\n\n    case \"abort\":\n      if (failure.error.abort !== undefined) {\n        return new AbortError(\n          failure as QueryFailure & { error: { abort: QueryValue } },\n          httpStatus,\n        );\n      }\n      break;\n\n    case \"constraint_failure\":\n      if (failure.error.constraint_failures !== undefined) {\n        return new ConstraintFailureError(\n          failure as QueryFailure & {\n            error: { constraint_failures: Array<ConstraintFailure> };\n          },\n          httpStatus,\n        );\n      }\n      break;\n\n    case \"unauthorized\":\n      return new AuthenticationError(failure, httpStatus);\n\n    case \"forbidden\":\n      return new AuthorizationError(failure, httpStatus);\n\n    case \"contended_transaction\":\n      return new ContendedTransactionError(failure, httpStatus);\n\n    case \"limit_exceeded\":\n      return new ThrottlingError(failure, httpStatus);\n\n    case \"time_out\":\n      return new QueryTimeoutError(failure, httpStatus);\n\n    case \"internal_error\":\n      return new ServiceInternalError(failure, httpStatus);\n  }\n\n  return new QueryRuntimeError(failure, httpStatus);\n};\n", "/**\n * Readonly object representing the paths of the Fauna API to be used\n * with HTTP clients.\n */\nexport const FaunaAPIPaths = {\n  QUERY: \"/query/1\",\n  STREAM: \"/stream/1\",\n  EVENT_FEED: \"/feed/1\",\n} as const;\n\nexport type SupportedFaunaAPIPaths =\n  (typeof FaunaAPIPaths)[keyof typeof FaunaAPIPaths];\n", "/** following reference needed to include types for experimental fetch API in Node */\n/// <reference lib=\"dom\" />\n\nimport { getServiceError, NetworkError } from \"../errors\";\nimport { QueryFailure, QueryRequest } from \"../wire-protocol\";\nimport { FaunaAPIPaths } from \"./paths\";\nimport {\n  HTTPClient,\n  HTTPClientOptions,\n  HTTPRequest,\n  HTTPResponse,\n  HTTPStreamRequest,\n  HTTPStreamClient,\n  StreamAdapter,\n} from \"./http-client\";\n\n/**\n * An implementation for {@link HTTPClient} that uses the native fetch API\n */\nexport class FetchClient implements HTTPClient, HTTPStreamClient {\n  #baseUrl: string;\n  #defaultRequestPath = FaunaAPIPaths.QUERY;\n  #defaultStreamPath = FaunaAPIPaths.STREAM;\n  #keepalive: boolean;\n\n  constructor({ url, fetch_keepalive }: HTTPClientOptions) {\n    this.#baseUrl = url;\n    this.#keepalive = fetch_keepalive;\n  }\n\n  #resolveURL(path: string): string {\n    return new URL(path, this.#baseUrl).toString();\n  }\n\n  /** {@inheritDoc HTTPClient.request} */\n  async request<T = QueryRequest>({\n    data,\n    headers: requestHeaders,\n    method,\n    client_timeout_ms,\n    path = this.#defaultRequestPath,\n  }: HTTPRequest<T>): Promise<HTTPResponse> {\n    const signal =\n      AbortSignal.timeout === undefined\n        ? (() => {\n            const controller = new AbortController();\n            const signal = controller.signal;\n            setTimeout(() => controller.abort(), client_timeout_ms);\n            return signal;\n          })()\n        : AbortSignal.timeout(client_timeout_ms);\n\n    const response = await fetch(this.#resolveURL(path), {\n      method,\n      headers: { ...requestHeaders, \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(data),\n      signal,\n      keepalive: this.#keepalive,\n    }).catch((error) => {\n      throw new NetworkError(\"The network connection encountered a problem.\", {\n        cause: error,\n      });\n    });\n\n    const status = response.status;\n\n    const responseHeaders: Record<string, string> = {};\n    response.headers.forEach((value, key) => (responseHeaders[key] = value));\n\n    const body = await response.text();\n\n    return {\n      status,\n      body,\n      headers: responseHeaders,\n    };\n  }\n\n  /** {@inheritDoc HTTPStreamClient.stream} */\n  stream({\n    data,\n    headers: requestHeaders,\n    method,\n    path = this.#defaultStreamPath,\n  }: HTTPStreamRequest): StreamAdapter {\n    const request = new Request(this.#resolveURL(path), {\n      method,\n      headers: { ...requestHeaders, \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(data),\n      keepalive: this.#keepalive,\n    });\n\n    const abortController = new AbortController();\n\n    const options = {\n      signal: abortController.signal,\n    };\n\n    async function* reader() {\n      const response = await fetch(request, options).catch((error) => {\n        throw new NetworkError(\n          \"The network connection encountered a problem.\",\n          {\n            cause: error,\n          },\n        );\n      });\n      const status = response.status;\n      if (!(status >= 200 && status < 400)) {\n        const failure: QueryFailure = await response.json();\n        throw getServiceError(failure, status);\n      }\n\n      const body = response.body;\n      if (!body) {\n        throw new Error(\"Response body is undefined.\");\n      }\n      const reader = body.getReader();\n\n      try {\n        for await (const line of readLines(reader)) {\n          yield line;\n        }\n      } catch (error) {\n        throw new NetworkError(\n          \"The network connection encountered a problem while streaming events.\",\n          { cause: error },\n        );\n      }\n    }\n\n    return {\n      read: reader(),\n      close: () => {\n        abortController.abort(\"Stream closed by the client.\");\n      },\n    };\n  }\n\n  /** {@inheritDoc HTTPClient.close} */\n  close() {\n    // no actions at this time\n  }\n}\n\n/**\n * Get individual lines from the stream\n *\n * The stream may be broken into arbitrary chunks, but the events are delimited by a newline character.\n *\n * @param reader - The stream reader\n */\nasync function* readLines(reader: ReadableStreamDefaultReader<Uint8Array>) {\n  const textDecoder = new TextDecoder();\n  let partOfLine = \"\";\n  for await (const chunk of readChunks(reader)) {\n    const chunkText = textDecoder.decode(chunk);\n    const chunkLines = (partOfLine + chunkText).split(\"\\n\");\n\n    // Yield all complete lines\n    for (let i = 0; i < chunkLines.length - 1; i++) {\n      yield chunkLines[i].trim();\n    }\n\n    // Store the partial line\n    partOfLine = chunkLines[chunkLines.length - 1];\n  }\n\n  // Yield the remaining partial line if any\n  if (partOfLine.trim() !== \"\") {\n    yield partOfLine;\n  }\n}\n\nasync function* readChunks(reader: ReadableStreamDefaultReader<Uint8Array>) {\n  let done = false;\n  do {\n    const readResult = await reader.read();\n    if (readResult.value !== undefined) {\n      yield readResult.value;\n    }\n    done = readResult.done;\n  } while (!done);\n}\n", "let http2: any;\ntry {\n  http2 = require(\"node:http2\");\n} catch (_) {\n  http2 = undefined;\n}\nimport {\n  HTTPClient,\n  HTTPClientOptions,\n  HTTPRequest,\n  HTTPResponse,\n  HTTPStreamClient,\n  HTTPStreamRequest,\n  StreamAdapter,\n} from \"./http-client\";\nimport { NetworkError, getServiceError } from \"../errors\";\nimport { QueryFailure, QueryRequest } from \"../wire-protocol\";\nimport { FaunaAPIPaths } from \"./paths\";\n\n// alias http2 types\ntype ClientHttp2Session = any;\ntype ClientHttp2Stream = any;\ntype IncomingHttpHeaders = any;\ntype IncomingHttpStatusHeader = any;\ntype OutgoingHttpHeaders = any;\n\n/**\n * An implementation for {@link HTTPClient} that uses the node http package\n */\nexport class NodeHTTP2Client implements HTTPClient, HTTPStreamClient {\n  static #clients: Map<string, NodeHTTP2Client> = new Map();\n\n  #http2_session_idle_ms: number;\n  #http2_max_streams: number;\n  #url: string;\n  #numberOfUsers = 0;\n  #session: ClientHttp2Session | null;\n\n  #defaultRequestPath = FaunaAPIPaths.QUERY;\n  #defaultStreamPath = FaunaAPIPaths.STREAM;\n\n  private constructor({\n    http2_session_idle_ms,\n    url,\n    http2_max_streams,\n  }: HTTPClientOptions) {\n    if (http2 === undefined) {\n      throw new Error(\"Your platform does not support Node's http2 library\");\n    }\n\n    this.#http2_session_idle_ms = http2_session_idle_ms;\n    this.#http2_max_streams = http2_max_streams;\n    this.#url = url;\n    this.#session = null;\n  }\n\n  /**\n   * Gets a {@link NodeHTTP2Client} matching the {@link HTTPClientOptions}\n   * @param httpClientOptions - the {@link HTTPClientOptions}\n   * @returns a {@link NodeHTTP2Client} matching the {@link HTTPClientOptions}\n   */\n  static getClient(httpClientOptions: HTTPClientOptions): NodeHTTP2Client {\n    const clientKey = NodeHTTP2Client.#getClientKey(httpClientOptions);\n    if (!NodeHTTP2Client.#clients.has(clientKey)) {\n      NodeHTTP2Client.#clients.set(\n        clientKey,\n        new NodeHTTP2Client(httpClientOptions),\n      );\n    }\n    // we know that we have a client here\n    const client = NodeHTTP2Client.#clients.get(clientKey) as NodeHTTP2Client;\n    client.#numberOfUsers++;\n    return client;\n  }\n\n  static #getClientKey({ http2_session_idle_ms, url }: HTTPClientOptions) {\n    return `${url}|${http2_session_idle_ms}`;\n  }\n\n  /** {@inheritDoc HTTPClient.request} */\n  async request<T = QueryRequest>(req: HTTPRequest<T>): Promise<HTTPResponse> {\n    let retryCount = 0;\n    let memoizedError: any;\n    do {\n      try {\n        return await this.#doRequest(req);\n      } catch (error: any) {\n        // see https://github.com/nodejs/node/pull/42190/files\n        // and https://github.com/nodejs/help/issues/2105\n        //\n        // TLDR; In Node, there is a race condition between handling\n        // GOAWAY and submitting requests - that can cause\n        // clients that safely handle go away to submit\n        // requests after a GOAWAY was received anyway.\n        //\n        // technical explanation: node HTTP2 request gets put\n        // on event queue before it is actually executed. In the iterim,\n        // a GOAWAY can come and cause the request to fail\n        // with a GOAWAY.\n        if (error?.code !== \"ERR_HTTP2_GOAWAY_SESSION\") {\n          throw new NetworkError(\n            \"The network connection encountered a problem.\",\n            {\n              cause: error,\n            },\n          );\n        }\n        memoizedError = error;\n        retryCount++;\n      }\n    } while (retryCount < 3);\n    throw new NetworkError(\"The network connection encountered a problem.\", {\n      cause: memoizedError,\n    });\n  }\n\n  /** {@inheritDoc HTTPStreamClient.stream} */\n  stream(req: HTTPStreamRequest): StreamAdapter {\n    return this.#doStream(req);\n  }\n\n  /** {@inheritDoc HTTPClient.close} */\n  close() {\n    // defend against redundant close calls\n    if (this.isClosed()) {\n      return;\n    }\n    this.#numberOfUsers--;\n    if (this.#numberOfUsers === 0 && this.#session && !this.#session.closed) {\n      this.#session.close();\n    }\n  }\n\n  /**\n   * @returns true if this client has been closed, false otherwise.\n   */\n  isClosed(): boolean {\n    return this.#numberOfUsers === 0;\n  }\n\n  #closeForAll() {\n    this.#numberOfUsers = 0;\n    if (this.#session && !this.#session.closed) {\n      this.#session.close();\n    }\n  }\n\n  #connect() {\n    // create the session if it does not exist or is closed\n    if (!this.#session || this.#session.closed || this.#session.destroyed) {\n      const newSession: ClientHttp2Session = http2\n        .connect(this.#url, {\n          peerMaxConcurrentStreams: this.#http2_max_streams,\n        })\n        .once(\"error\", () => this.#closeForAll())\n        .once(\"goaway\", () => this.#closeForAll());\n\n      newSession.setTimeout(this.#http2_session_idle_ms, () => {\n        this.#closeForAll();\n      });\n\n      this.#session = newSession;\n    }\n    return this.#session;\n  }\n\n  #doRequest<T = QueryRequest>({\n    client_timeout_ms,\n    data: requestData,\n    headers: requestHeaders,\n    method,\n    path = this.#defaultRequestPath,\n  }: HTTPRequest<T>): Promise<HTTPResponse> {\n    return new Promise<HTTPResponse>((resolvePromise, rejectPromise) => {\n      let req: ClientHttp2Stream;\n      const onResponse = (\n        http2ResponseHeaders: IncomingHttpHeaders & IncomingHttpStatusHeader,\n      ) => {\n        const status = Number(\n          http2ResponseHeaders[http2.constants.HTTP2_HEADER_STATUS],\n        );\n        let responseData = \"\";\n\n        // append response data to the data string every time we receive new\n        // data chunks in the response\n        req.on(\"data\", (chunk: string) => {\n          responseData += chunk;\n        });\n\n        // Once the response is finished, resolve the promise\n        req.on(\"end\", () => {\n          resolvePromise({\n            status,\n            body: responseData,\n            headers: http2ResponseHeaders,\n          });\n        });\n      };\n\n      try {\n        const httpRequestHeaders: OutgoingHttpHeaders = {\n          ...requestHeaders,\n          [http2.constants.HTTP2_HEADER_PATH]: path,\n          [http2.constants.HTTP2_HEADER_METHOD]: method,\n        };\n\n        const session = this.#connect();\n        req = session\n          .request(httpRequestHeaders)\n          .setEncoding(\"utf8\")\n          .on(\"error\", (error: any) => {\n            rejectPromise(error);\n          })\n          .on(\"response\", onResponse);\n\n        req.write(JSON.stringify(requestData), \"utf8\");\n\n        // req.setTimeout must be called before req.end()\n        req.setTimeout(client_timeout_ms, () => {\n          req.destroy(new Error(`Client timeout`));\n        });\n\n        req.end();\n      } catch (error) {\n        rejectPromise(error);\n      }\n    });\n  }\n\n  /** {@inheritDoc HTTPStreamClient.stream} */\n  #doStream({\n    data: requestData,\n    headers: requestHeaders,\n    method,\n    path = this.#defaultStreamPath,\n  }: HTTPStreamRequest): StreamAdapter {\n    let resolveChunk: (chunk: string[]) => void;\n    let rejectChunk: (reason: any) => void;\n\n    const setChunkPromise = () =>\n      new Promise<string[]>((res, rej) => {\n        resolveChunk = res;\n        rejectChunk = rej;\n      });\n\n    let chunkPromise = setChunkPromise();\n\n    let req: ClientHttp2Stream;\n    const onResponse = (\n      http2ResponseHeaders: IncomingHttpHeaders & IncomingHttpStatusHeader,\n    ) => {\n      const status = Number(\n        http2ResponseHeaders[http2.constants.HTTP2_HEADER_STATUS],\n      );\n      if (!(status >= 200 && status < 400)) {\n        // Get the error body and then throw an error\n        let responseData = \"\";\n\n        // append response data to the data string every time we receive new\n        // data chunks in the response\n        req.on(\"data\", (chunk: string) => {\n          responseData += chunk;\n        });\n\n        // Once the response is finished, resolve the promise\n        req.on(\"end\", () => {\n          try {\n            const failure: QueryFailure = JSON.parse(responseData);\n            rejectChunk(getServiceError(failure, status));\n          } catch (error) {\n            rejectChunk(\n              new NetworkError(\"Could not process query failure.\", {\n                cause: error,\n              }),\n            );\n          }\n        });\n      } else {\n        let partOfLine = \"\";\n\n        // append response data to the data string every time we receive new\n        // data chunks in the response\n        req.on(\"data\", (chunk: string) => {\n          const chunkLines = (partOfLine + chunk).split(\"\\n\");\n\n          // Yield all complete lines\n          resolveChunk(chunkLines.map((s) => s.trim()).slice(0, -1));\n          chunkPromise = setChunkPromise();\n\n          // Store the partial line\n          partOfLine = chunkLines[chunkLines.length - 1];\n        });\n\n        // Once the response is finished, resolve the promise\n        req.on(\"end\", () => {\n          resolveChunk([partOfLine]);\n        });\n      }\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self = this;\n\n    async function* reader(): AsyncGenerator<string> {\n      const httpRequestHeaders: OutgoingHttpHeaders = {\n        ...requestHeaders,\n        [http2.constants.HTTP2_HEADER_PATH]: path,\n        [http2.constants.HTTP2_HEADER_METHOD]: method,\n      };\n\n      const session = self.#connect();\n      req = session\n        .request(httpRequestHeaders)\n        .setEncoding(\"utf8\")\n        .on(\"error\", (error: any) => {\n          rejectChunk(error);\n        })\n        .on(\"response\", onResponse);\n\n      const body = JSON.stringify(requestData);\n\n      req.write(body, \"utf8\");\n\n      req.end();\n\n      while (true) {\n        const chunks = await chunkPromise;\n        for (const chunk of chunks) {\n          yield chunk;\n        }\n      }\n    }\n\n    return {\n      read: reader(),\n      close: () => {\n        if (req) {\n          req.close();\n        }\n      },\n    };\n  }\n}\n", "import { FetchClient } from \"./fetch-client\";\nimport {\n  HTTPClient,\n  HTTPClientOptions,\n  HTTPResponse,\n  HTTPStreamClient,\n} from \"./http-client\";\nimport { NodeHTTP2Client } from \"./node-http2-client\";\n\nexport * from \"./paths\";\nexport * from \"./fetch-client\";\nexport * from \"./http-client\";\nexport * from \"./node-http2-client\";\n\nexport const getDefaultHTTPClient = (\n  options: HTTPClientOptions,\n): HTTPClient & HTTPStreamClient =>\n  nodeHttp2IsSupported()\n    ? NodeHTTP2Client.getClient(options)\n    : new FetchClient(options);\n\nexport const isHTTPResponse = (res: any): res is HTTPResponse =>\n  res instanceof Object && \"body\" in res && \"headers\" in res && \"status\" in res;\n\nexport const isStreamClient = (\n  client: Partial<HTTPStreamClient>,\n): client is HTTPStreamClient => {\n  return \"stream\" in client && typeof client.stream === \"function\";\n};\n\nexport const nodeHttp2IsSupported = () => {\n  if (\n    typeof process !== \"undefined\" &&\n    process &&\n    process.release?.name === \"node\"\n  ) {\n    try {\n      require(\"node:http2\");\n      return true;\n    } catch (_) {\n      return false;\n    }\n  }\n  return false;\n};\n", "import base64 from \"base64-js\";\n\nimport { ClientError } from \"./errors\";\nimport {\n  DateStub,\n  Document,\n  DocumentReference,\n  Module,\n  NamedDocument,\n  NamedDocumentReference,\n  TimeStub,\n  Page,\n  NullDocument,\n  EmbeddedSet,\n  StreamToken,\n} from \"./values\";\nimport {\n  QueryValue,\n  QueryInterpolation,\n  ObjectFragment,\n  ArrayFragment,\n  FQLFragment,\n  ValueFragment,\n  TaggedType,\n  TaggedLong,\n  TaggedInt,\n  TaggedDouble,\n  TaggedObject,\n  EncodedObject,\n  TaggedTime,\n  TaggedDate,\n  TaggedMod,\n  TaggedRef,\n  TaggedBytes,\n} from \"./wire-protocol\";\nimport { Query, QueryArgument, QueryArgumentObject } from \"./query-builder\";\n\nexport interface DecodeOptions {\n  long_type: \"number\" | \"bigint\";\n}\n\n/**\n * TaggedType provides the encoding/decoding of the Fauna Tagged Type formatting\n */\nexport class TaggedTypeFormat {\n  /**\n   * Encode the value to the Tagged Type format for Fauna\n   *\n   * @param input - value that will be encoded\n   * @returns Map of result\n   */\n  static encode(input: QueryArgument): TaggedType {\n    return encode(input);\n  }\n\n  /**\n   * Encode the value to a QueryInterpolation to send to Fauna\n   *\n   * @param input - value that will be encoded\n   * @returns Map of result\n   */\n  static encodeInterpolation(input: QueryArgument): QueryInterpolation {\n    return encodeInterpolation(input);\n  }\n\n  /**\n   * Decode the JSON string result from Fauna to remove Tagged Type formatting.\n   *\n   * @param input - JSON string result from Fauna\n   * @returns object of result of FQL query\n   */\n  static decode(input: string, decodeOptions: DecodeOptions): any {\n    return JSON.parse(input, (_, value: any) => {\n      if (value == null) return null;\n      if (value[\"@mod\"]) {\n        return new Module(value[\"@mod\"]);\n      } else if (value[\"@doc\"]) {\n        // WIP: The string-based ref is being removed from the API\n        if (typeof value[\"@doc\"] === \"string\") {\n          const [modName, id] = value[\"@doc\"].split(\":\");\n          return new DocumentReference({ coll: modName, id: id });\n        }\n        // if not a docref string, then it is an object.\n        const obj = value[\"@doc\"];\n        if (obj.id) {\n          return new Document(obj);\n        } else {\n          return new NamedDocument(obj);\n        }\n      } else if (value[\"@ref\"]) {\n        const obj = value[\"@ref\"];\n        let ref: DocumentReference | NamedDocumentReference;\n        if (obj.id) {\n          ref = new DocumentReference(obj);\n        } else {\n          ref = new NamedDocumentReference(obj);\n        }\n        if (\"exists\" in obj && obj.exists === false) {\n          return new NullDocument(ref, obj.cause);\n        }\n        return ref;\n      } else if (value[\"@set\"]) {\n        if (typeof value[\"@set\"] === \"string\") {\n          return new EmbeddedSet(value[\"@set\"]);\n        }\n        return new Page(value[\"@set\"]);\n      } else if (value[\"@int\"]) {\n        return Number(value[\"@int\"]);\n      } else if (value[\"@long\"]) {\n        const bigInt = BigInt(value[\"@long\"]);\n        if (decodeOptions.long_type === \"number\") {\n          if (\n            bigInt > Number.MAX_SAFE_INTEGER ||\n            bigInt < Number.MIN_SAFE_INTEGER\n          ) {\n            console.warn(`Value is too large to be represented as a number. \\\nReturning as Number with loss of precision. Use long_type 'bigint' instead.`);\n          }\n          return Number(bigInt);\n        }\n        return bigInt;\n      } else if (value[\"@double\"]) {\n        return Number(value[\"@double\"]);\n      } else if (value[\"@date\"]) {\n        return DateStub.from(value[\"@date\"]);\n      } else if (value[\"@time\"]) {\n        return TimeStub.from(value[\"@time\"]);\n      } else if (value[\"@object\"]) {\n        return value[\"@object\"];\n      } else if (value[\"@stream\"]) {\n        return new StreamToken(value[\"@stream\"]);\n      } else if (value[\"@bytes\"]) {\n        return base64toBuffer(value[\"@bytes\"]);\n      }\n\n      return value;\n    });\n  }\n}\n\nexport const LONG_MIN = BigInt(\"-9223372036854775808\");\nexport const LONG_MAX = BigInt(\"9223372036854775807\");\nexport const INT_MIN = -(2 ** 31);\nexport const INT_MAX = 2 ** 31 - 1;\n\nconst encodeMap = {\n  bigint: (value: bigint): TaggedLong | TaggedInt => {\n    if (value < LONG_MIN || value > LONG_MAX) {\n      throw new RangeError(\n        \"BigInt value exceeds max magnitude for a 64-bit Fauna long. Use a 'number' to represent doubles beyond that limit.\",\n      );\n    }\n    if (value >= INT_MIN && value <= INT_MAX) {\n      return { \"@int\": value.toString() };\n    }\n    return {\n      \"@long\": value.toString(),\n    };\n  },\n  number: (value: number): TaggedDouble | TaggedInt | TaggedLong => {\n    if (\n      value === Number.POSITIVE_INFINITY ||\n      value === Number.NEGATIVE_INFINITY\n    ) {\n      throw new RangeError(`Cannot convert ${value} to a Fauna type.`);\n    }\n\n    if (!Number.isInteger(value)) {\n      return { \"@double\": value.toString() };\n    } else {\n      if (value >= INT_MIN && value <= INT_MAX) {\n        return { \"@int\": value.toString() };\n      } else if (Number.isSafeInteger(value)) {\n        return {\n          \"@long\": value.toString(),\n        };\n      }\n      return { \"@double\": value.toString() };\n    }\n  },\n  string: (value: string): string => {\n    return value;\n  },\n  object: (input: QueryArgumentObject): TaggedObject | EncodedObject => {\n    let wrapped = false;\n    const _out: EncodedObject = {};\n\n    for (const k in input) {\n      if (k.startsWith(\"@\")) {\n        wrapped = true;\n      }\n      if (input[k] !== undefined) {\n        _out[k] = encode(input[k]);\n      }\n    }\n    return wrapped ? { \"@object\": _out } : _out;\n  },\n  array: (input: QueryArgument[]): TaggedType[] => input.map(encode),\n  date: (dateValue: Date): TaggedTime => ({\n    \"@time\": dateValue.toISOString(),\n  }),\n  faunadate: (value: DateStub): TaggedDate => ({ \"@date\": value.dateString }),\n  faunatime: (value: TimeStub): TaggedTime => ({ \"@time\": value.isoString }),\n  module: (value: Module): TaggedMod => ({ \"@mod\": value.name }),\n  documentReference: (value: DocumentReference): TaggedRef => ({\n    \"@ref\": { id: value.id, coll: { \"@mod\": value.coll.name } },\n  }),\n  document: (value: Document): TaggedRef => ({\n    \"@ref\": { id: value.id, coll: { \"@mod\": value.coll.name } },\n  }),\n  namedDocumentReference: (value: NamedDocumentReference): TaggedRef => ({\n    \"@ref\": { name: value.name, coll: { \"@mod\": value.coll.name } },\n  }),\n  namedDocument: (value: NamedDocument): TaggedRef => ({\n    \"@ref\": { name: value.name, coll: { \"@mod\": value.coll.name } },\n  }),\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  set: (value: Page<QueryValue> | EmbeddedSet) => {\n    throw new ClientError(\n      \"Page could not be encoded. Fauna does not accept encoded Set values, yet. Use Page.data and Page.after as arguments, instead.\",\n    );\n    // TODO: uncomment to encode Pages once core starts accepting `@set` tagged values\n    // if (value.data === undefined) {\n    //   // if a Page has no data, then it must still have an 'after' cursor\n    //   return { \"@set\": value.after };\n    // }\n    // return {\n    //   \"@set\": { data: encodeMap[\"array\"](value.data), after: value.after },\n    // };\n  },\n  // TODO: encode as a tagged value if provided as a query arg?\n  // streamToken: (value: StreamToken): TaggedStreamToken => ({ \"@stream\": value.token }),\n  streamToken: (value: StreamToken): string => value.token,\n  bytes: (value: ArrayBuffer | Uint8Array): TaggedBytes => ({\n    \"@bytes\": bufferToBase64(value),\n  }),\n};\n\nconst encode = (input: QueryArgument): TaggedType => {\n  switch (typeof input) {\n    case \"bigint\":\n      return encodeMap[\"bigint\"](input);\n    case \"string\":\n      return encodeMap[\"string\"](input);\n    case \"number\":\n      return encodeMap[\"number\"](input);\n    case \"boolean\":\n      return input;\n    case \"object\":\n      if (input == null) {\n        return null;\n      } else if (Array.isArray(input)) {\n        return encodeMap[\"array\"](input);\n      } else if (input instanceof Date) {\n        return encodeMap[\"date\"](input);\n      } else if (input instanceof DateStub) {\n        return encodeMap[\"faunadate\"](input);\n      } else if (input instanceof TimeStub) {\n        return encodeMap[\"faunatime\"](input);\n      } else if (input instanceof Module) {\n        return encodeMap[\"module\"](input);\n      } else if (input instanceof Document) {\n        // Document extends DocumentReference, so order is important here\n        return encodeMap[\"document\"](input);\n      } else if (input instanceof DocumentReference) {\n        return encodeMap[\"documentReference\"](input);\n      } else if (input instanceof NamedDocument) {\n        // NamedDocument extends NamedDocumentReference, so order is important here\n        return encodeMap[\"namedDocument\"](input);\n      } else if (input instanceof NamedDocumentReference) {\n        return encodeMap[\"namedDocumentReference\"](input);\n      } else if (input instanceof NullDocument) {\n        return encode(input.ref);\n      } else if (input instanceof Page) {\n        return encodeMap[\"set\"](input);\n      } else if (input instanceof EmbeddedSet) {\n        return encodeMap[\"set\"](input);\n      } else if (input instanceof StreamToken) {\n        return encodeMap[\"streamToken\"](input);\n      } else if (input instanceof Uint8Array || input instanceof ArrayBuffer) {\n        return encodeMap[\"bytes\"](input);\n      } else if (ArrayBuffer.isView(input)) {\n        throw new ClientError(\n          \"Error encoding TypedArray to Fauna Bytes. Convert your TypedArray to Uint8Array or ArrayBuffer before passing it to Fauna. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\",\n        );\n      } else if (input instanceof Query) {\n        throw new TypeError(\n          \"Cannot encode instance of type 'Query'. Try using TaggedTypeFormat.encodeInterpolation instead.\",\n        );\n      } else {\n        return encodeMap[\"object\"](input);\n      }\n    default:\n      // catch \"undefined\", \"symbol\", and \"function\"\n      throw new TypeError(\n        `Passing ${typeof input} as a QueryArgument is not supported`,\n      );\n  }\n  // anything here would be unreachable code\n};\n\nconst encodeInterpolation = (input: QueryArgument): QueryInterpolation => {\n  switch (typeof input) {\n    case \"bigint\":\n    case \"string\":\n    case \"number\":\n    case \"boolean\":\n      return encodeValueInterpolation(encode(input));\n    case \"object\":\n      if (\n        input == null ||\n        input instanceof Date ||\n        input instanceof DateStub ||\n        input instanceof TimeStub ||\n        input instanceof Module ||\n        input instanceof DocumentReference ||\n        input instanceof NamedDocumentReference ||\n        input instanceof Page ||\n        input instanceof EmbeddedSet ||\n        input instanceof StreamToken ||\n        input instanceof Uint8Array ||\n        input instanceof ArrayBuffer ||\n        ArrayBuffer.isView(input)\n      ) {\n        return encodeValueInterpolation(encode(input));\n      } else if (input instanceof NullDocument) {\n        return encodeInterpolation(input.ref);\n      } else if (input instanceof Query) {\n        return encodeQueryInterpolation(input);\n      } else if (Array.isArray(input)) {\n        return encodeArrayInterpolation(input);\n      } else {\n        return encodeObjectInterpolation(input);\n      }\n    default:\n      // catch \"undefined\", \"symbol\", and \"function\"\n      throw new TypeError(\n        `Passing ${typeof input} as a QueryArgument is not supported`,\n      );\n  }\n};\n\nconst encodeObjectInterpolation = (\n  input: QueryArgumentObject,\n): ObjectFragment => {\n  const _out: EncodedObject = {};\n\n  for (const k in input) {\n    if (input[k] !== undefined) {\n      _out[k] = encodeInterpolation(input[k]);\n    }\n  }\n  return { object: _out };\n};\n\nconst encodeArrayInterpolation = (\n  input: Array<QueryArgument>,\n): ArrayFragment => {\n  const encodedItems = input.map(encodeInterpolation);\n  return { array: encodedItems };\n};\n\nconst encodeQueryInterpolation = (value: Query): FQLFragment => value.encode();\n\nconst encodeValueInterpolation = (value: TaggedType): ValueFragment => ({\n  value,\n});\n\nfunction base64toBuffer(value: string): Uint8Array {\n  return base64.toByteArray(value);\n}\n\nfunction bufferToBase64(value: ArrayBuffer | Uint8Array): string {\n  const arr: Uint8Array =\n    value instanceof Uint8Array ? value : new Uint8Array(value);\n\n  return base64.fromByteArray(arr);\n}\n", "// Date and Time expressions\n\nconst yearpart = /(?:\\d{4}|[\\u2212-]\\d{4,}|\\+\\d{5,})/;\nconst monthpart = /(?:0[1-9]|1[0-2])/;\nconst daypart = /(?:0[1-9]|[12]\\d|3[01])/;\nconst hourpart = /(?:[01][0-9]|2[0-3])/;\nconst minsecpart = /(?:[0-5][0-9])/;\nconst decimalpart = /(?:\\.\\d+)/;\n\nconst datesplit = new RegExp(\n  `(${yearpart.source}-(${monthpart.source})-(${daypart.source}))`\n);\n\nconst timesplit = new RegExp(\n  `(${hourpart.source}:${minsecpart.source}:${minsecpart.source}${decimalpart.source}?)`\n);\n\nconst zonesplit = new RegExp(\n  `([zZ]|[+\\u2212-]${hourpart.source}(?::?${minsecpart.source}|:${minsecpart.source}:${minsecpart.source}))`\n);\n\n/**\n * Matches the subset of ISO8601 dates that Fauna can accept. Cannot include any\n * time part\n */\nexport const plaindate = new RegExp(`^${datesplit.source}$`);\n\n/**\n * Matches a valid ISO8601 date and can have anything trailing after.\n */\nexport const startsWithPlaindate = new RegExp(`^${datesplit.source}`);\n\n/**\n * Matches the subset of ISO8601 times that Fauna can accept.\n */\nexport const datetime = new RegExp(\n  `^${datesplit.source}T${timesplit.source}${zonesplit.source}$`\n);\n", "import { ClientError } from \"../errors\";\nimport * as PARSE from \"../regex\";\n\n/**\n * A wrapper around the Fauna `Time` type. It, represents a fixed point in time\n * without regard to calendar or location, e.g. July 20, 1969, at 20:17 UTC.\n * Convert to and from Javascript Date's with the {@link TimeStub.fromDate} and\n * {@link TimeStub.toDate} methods.\n * See remarks for possible precision loss when doing this. If precision loss is\n * a concern consider using a 3rd party datetime library such as luxon.\n *\n * @remarks The Javascript `Date` type most closely resembles a Fauna `Time`,\n * not a Fauna `Date`. However, Fauna stores `Time` values with nanosecond\n * precision, while Javascript `Date` values only have millisecond precision.\n * This TimeStub class preserves precision by storing the original string value\n * and should be used whenever possible to pass `Time` values back to Fauna.\n * Converting to a Javascript date before sending to Fauna could result in loss\n * of precision.\n *\n * @see {@link https://docs.fauna.com/fauna/current/reference/fql_reference/types#time}\n */\nexport class TimeStub {\n  readonly isoString: string;\n\n  /**\n   * @remarks constructor is private to enforce using factory functions\n   */\n  private constructor(isoString: string) {\n    this.isoString = isoString;\n  }\n\n  /**\n   * Creates a new {@link TimeStub} from an ISO date string\n   * @param isoString - An ISO date string.\n   * @returns A new {@link TimeStub}\n   * @throws TypeError if a string is not provided, or RangeError if item\n   * is not a valid date\n   */\n  static from(isoString: string): TimeStub {\n    if (typeof isoString !== \"string\") {\n      throw new TypeError(\n        `Expected string but received ${typeof isoString}: ${isoString}`\n      );\n    }\n    const matches = PARSE.datetime.exec(isoString);\n    if (matches === null) {\n      throw new RangeError(\n        `(regex) Expected an ISO date string but received '${isoString}'`\n      );\n    }\n    // There are some dates that match the regex but are invalid, such as Feb 31.\n    // Javascript does not parse all years that are valid in fauna, so let\n    // Fauna be the final check.\n\n    return new TimeStub(isoString);\n  }\n\n  /**\n   * Creates a new {@link TimeStub} from a Javascript `Date`\n   * @param date - A Javascript `Date`\n   * @returns A new {@link TimeStub}\n   */\n  static fromDate(date: Date): TimeStub {\n    return new TimeStub(date.toISOString());\n  }\n\n  /**\n   * Get a copy of the `TimeStub` converted to a Javascript `Date`. Does not\n   * mutate the existing `TimeStub` value.\n   * @returns A `Date`\n   */\n  toDate(): Date {\n    const date = new Date(this.isoString);\n    if (date.toString() === \"Invalid Date\") {\n      throw new RangeError(\n        \"Fauna Date could not be converted to Javascript Date\"\n      );\n    }\n    return date;\n  }\n\n  /**\n   * Override default string conversion\n   * @returns the string representation of a `TimeStub`\n   */\n  toString(): string {\n    return `TimeStub(\"${this.isoString}\")`;\n  }\n}\n\n/**\n * A wrapper aroud the Fauna `Date` type. It represents a calendar date that is\n * not associated with a particular time or time zone, e.g. August 24th, 2006.\n * Convert to and from Javascript Date's with the {@link DateStub.fromDate} and\n * {@link DateStub.toDate} methods. Javascript Dates are rendered in UTC time\n * before the date part is used.\n * See remarks for possible precision loss when doing this. If precision loss is\n * a concern consider using a 3rd party datetime library such as luxon.\n *\n * @remarks The Javascript `Date` type always has a time associated with it, but\n * Fauna's `Date` type does not. When converting from a Fauna `Date` to a\n * Javascript `Date`, we set time to 00:00:00 UTC. When converting a Javascript\n * `Date` or time string to Fauna `Date`, we convert to UTC first. Care should\n * be taken to specify the desired date, since Javascript `Date`s use local\n * timezone info by default.\n *\n * @see {@link https://docs.fauna.com/fauna/current/reference/fql_reference/types#date}\n */\nexport class DateStub {\n  readonly dateString: string;\n\n  /**\n   * @remarks constructor is private to enforce using factory functions\n   */\n  private constructor(dateString: string) {\n    this.dateString = dateString;\n  }\n\n  /**\n   * Creates a new {@link DateStub} from a date string\n   * @param dateString - A plain date string. The time is converted to UTC\n   * before saving the date.\n   * @returns A new {@link DateStub}\n   * @throws TypeError if a string is not provided, or RangeError if dateString\n   * is not a valid date\n   */\n  static from(dateString: string): DateStub {\n    if (typeof dateString !== \"string\") {\n      throw new TypeError(\n        `Expected string but received ${typeof dateString}: ${dateString}`\n      );\n    }\n    const matches = PARSE.plaindate.exec(dateString);\n    if (matches === null) {\n      throw new RangeError(\n        `Expected a plain date string but received '${dateString}'`\n      );\n    }\n    // There are some dates that match the regex but are invalid, such as Feb 31.\n    // Javascript does not parse all years that are valid in fauna, so let\n    // Fauna be the final check.\n\n    return new DateStub(matches[0]);\n  }\n\n  /**\n   * Creates a new {@link DateStub} from a Javascript `Date`\n   * @param date - A Javascript `Date`. The time is converted to UTC before\n   * saving the date.\n   * @returns A new {@link DateStub}\n   */\n  static fromDate(date: Date): DateStub {\n    const dateString = date.toISOString();\n    const matches = PARSE.startsWithPlaindate.exec(dateString);\n    if (matches === null) {\n      // Our regex should match any possible date that comes out of\n      // `Date.toISOString()`, so we will only get here if the regex is\n      // incorrect. This is a ClientError since it is our fault.\n      throw new ClientError(`Failed to parse date '${date}'`);\n    }\n    return new DateStub(matches[0]);\n  }\n\n  /**\n   * Get a copy of the `TimeStub` converted to a Javascript `Date`. Does not\n   * mutate the existing `TimeStub` value.\n   * @returns A `Date`\n   */\n  toDate(): Date {\n    const date = new Date(this.dateString + \"T00:00:00Z\");\n    if (date.toString() === \"Invalid Date\") {\n      throw new RangeError(\n        \"Fauna Date could not be converted to Javascript Date\"\n      );\n    }\n    return date;\n  }\n\n  /**\n   * Override default string conversion\n   * @returns the string representation of a `DateStub`\n   */\n  toString(): string {\n    return `DateStub(\"${this.dateString}\")`;\n  }\n}\n", "import { QueryValueObject } from \"../wire-protocol\";\nimport { TimeStub } from \"./date-time\";\n\n/**\n * A reference to a Document with an ID. The Document may or may not exist.\n * References to Keys, Tokens, and Documents in user-defined Collections are\n * modeled with a {@link DocumentReference}.\n *\n * The example below retrieves a document reference from a\n * hypothetical \"Users\" collection.\n *\n * @example\n * ```javascript\n *  const response = await client.query(fql`\n *    Users.byId(\"101\")\n *  `);\n *  const userDocumentReference = response.data;\n *\n *  const id = userDocumentReference.id;\n *  id === \"101\"; // returns true\n * ```\n *\n * @see {@link https://docs.fauna.com/fauna/current/reference/fql_reference/types#special}\n */\nexport class DocumentReference {\n  readonly coll: Module;\n  readonly id: string;\n\n  constructor({ coll, id }: { coll: Module | string; id: string }) {\n    this.id = id;\n\n    if (typeof coll === \"string\") {\n      this.coll = new Module(coll);\n    } else {\n      this.coll = coll;\n    }\n  }\n}\n\n/**\n * A materialized Document with an ID. Keys, Tokens and Documents in\n * user-defined Collections are modeled with a {@link Document}. All top level\n * Document fields are added to a {@link Document} instance, but types cannot be\n * provided. Cast the instance to a {@link DocumentT} to have typesafe access to\n * all top level fields.\n *\n * The example below retrieves a document from a\n * hypothetical \"Users\" collection.\n *\n * @example\n * ```javascript\n *  const response = await client.query(fql`\n *    Users.byId(\"101\")\n *  `);\n *  const userDocument = response.data;\n *\n *  const color = userDocument.color;\n * ```\n *\n * @remarks The {@link Document} class cannot be generic because classes cannot\n * extend generic type arguments.\n *\n * @see {@link https://docs.fauna.com/fauna/current/reference/fql_reference/types#special}\n */\nexport class Document extends DocumentReference {\n  readonly ts: TimeStub;\n  readonly ttl?: TimeStub;\n\n  constructor(obj: {\n    coll: Module | string;\n    id: string;\n    ts: TimeStub;\n    [key: string]: any;\n  }) {\n    const { coll, id, ts, ...rest } = obj;\n    super({ coll, id });\n    this.ts = ts;\n    Object.assign(this, rest);\n  }\n\n  toObject(): { coll: Module; id: string; ts: TimeStub; ttl?: TimeStub } {\n    return { ...this };\n  }\n}\n\n/**\n * A reference to a Document with a name. The Document may or may not exist.\n * References to specific AccessProviders, Collections, Databases, Functions, etc. are\n * modeled with a {@link NamedDocumentReference}.\n *\n * The example below retrieves a NamedDocumentReference for a hypothetical\n * \"Users\" collection.\n *\n * @example\n * ```javascript\n *  const response = await client.query(fql`\n *    Users.definition\n *  `);\n *  const namedDocumentReference = response.data;\n *\n *  const collectionName = namedDocumentReference.name;\n *  collectionName === \"Users\"; // returns true\n * ```\n *\n * @see {@link https://docs.fauna.com/fauna/current/reference/fql_reference/types#special}\n */\nexport class NamedDocumentReference {\n  readonly coll: Module;\n  readonly name: string;\n\n  constructor({ coll, name }: { coll: Module | string; name: string }) {\n    this.name = name;\n\n    if (typeof coll === \"string\") {\n      this.coll = new Module(coll);\n    } else {\n      this.coll = coll;\n    }\n  }\n}\n\n/**\n * A materialized Document with a name. Specific AccessProviders, Collections, Databases,\n * Functions, etc. that include user defined data are modeled with a {@link NamedDocument}.\n *\n * The example below retrieves a NamedDocument for a hypothetical\n * \"Users\" collection.\n *\n * @example\n * ```javascript\n *  const response = await client.query(fql`\n *    Users.definition\n *  `);\n *  const userCollectionNamedDocument = response.data;\n *\n *  const indexes = userCollectionNamedDocument.indexes;\n * ```\n *\n * @example\n * All of the named Documents can have optional, user-defined data. The generic\n * class lets you define the shape of that data in a typesafe way\n * ```typescript\n *  type CollectionMetadata = {\n *    metadata: string\n *  }\n *\n *  const response = await client.query<NamedDocument<CollectionMetadata>>(fql`\n *    Users.definition\n *  `);\n *  const userCollection = response.data;\n *\n *  const metadata = userCollection.data.metadata;\n * ```\n *\n * @see {@link https://docs.fauna.com/fauna/current/reference/fql_reference/types#special}\n */\nexport class NamedDocument<\n  T extends QueryValueObject = Record<string, never>,\n> extends NamedDocumentReference {\n  readonly ts: TimeStub;\n  readonly data: T;\n\n  constructor(obj: {\n    coll: Module | string;\n    name: string;\n    ts: TimeStub;\n    data?: T;\n  }) {\n    const { coll, name, ts, data, ...rest } = obj;\n    super({ coll, name });\n    this.ts = ts;\n    this.data = data || ({} as T);\n    Object.assign(this, rest);\n  }\n\n  toObject(): { coll: Module; name: string; ts: TimeStub; data: T } {\n    return { ...this } as { coll: Module; name: string; ts: TimeStub; data: T };\n  }\n}\n\n/**\n * A Fauna module, such as a Collection, Database, Function, Role, etc.\n * Every module is usable directly in your FQL code.\n *\n * The example below shows FQL code that gets all documents for a hypothetical\n * 'Users' collection by creating a Module for user and then calling .all().\n *\n * You can also create modules for databases, functions, roles and other\n * entities in your database.\n *\n * @example\n * ```javascript\n *  const response = await client.query(fql`\n *    ${new Module(\"Users\")}.all()\n *  `);\n *  const allUserDocuments = response.data;\n * ```\n *\n * @see {@link https://docs.fauna.com/fauna/current/reference/fql_reference/types#module}\n */\nexport class Module {\n  readonly name: string;\n\n  constructor(name: string) {\n    this.name = name;\n  }\n}\n\n/**\n * A reference to a Document or Named Document that could not be read. The\n * Document may or may not exist in future queries. The cause field specifies\n * the reason the document could not be read, typically because the Document\n * does not exist or due to insufficient privileges.\n *\n * Some read operations, such as the `<Collection>.byId` method may return\n * either a Document or a NullDocument. This example shows how to handle such a\n * result with the driver\n *\n * @example\n * ```typescript\n *  const response = await client.query<Document | NullDocument>(fql`\n *    Users.byId(\"101\")\n *  `);\n *  const maybeUserDocument = response.data;\n *\n *  if (maybeUserDocument instanceof NullDocument) {\n *    // handle NullDocument case\n *    const cause = maybeUserDocument.cause\n *  } else {\n *    // handle Document case\n *    const color = maybeUserDocument.color;\n *  }\n * ```\n *\n * @see {@link https://docs.fauna.com/fauna/current/reference/fql_reference/types#nulldoc}\n */\nexport class NullDocument {\n  readonly ref: DocumentReference | NamedDocumentReference;\n  readonly cause: string;\n\n  constructor(ref: DocumentReference | NamedDocumentReference, cause: string) {\n    this.ref = ref;\n    this.cause = cause;\n  }\n}\n\n/**\n * A Document typed with a user-defined data type. Typescript users can cast\n * instances of {@link Document} to {@link DocumentT} to access user-defined fields with type safety.\n *\n * The example below creates a local type \"User\" that is applied to queries for documents in a\n * hypothetical \"Users\" collection.\n *\n * @example\n * ```typescript\n *  type User = {\n *    color: string\n *  }\n *\n *  const response = await client.query<DocumentT<User>>(fql`\n *    Users.byId(\"101\")\n *  `);\n *  const user = response.data;\n *\n *  const color = user.color;\n * ```\n *\n * @remarks The {@link Document} class cannot be generic because classes cannot\n * extend generic type arguments.\n */\nexport type DocumentT<T extends QueryValueObject> = Document & T;\n", "import { Client } from \"../client\";\nimport { Query, fql } from \"../query-builder\";\nimport { QueryOptions, QueryValue } from \"../wire-protocol\";\n\n/**\n * A materialized view of a Set.\n * @see {@link https://docs.fauna.com/fauna/current/reference/fql_reference/types#set}\n */\nexport class Page<T extends QueryValue> {\n  /** A materialized page of data */\n  readonly data: T[];\n  /**\n   * A pagination cursor, used to obtain additional information in the Set.\n   * If `after` is not provided, then `data` must be present and represents the\n   * last Page in the Set.\n   */\n  readonly after?: string;\n\n  constructor({ data, after }: { data: T[]; after?: string }) {\n    this.data = data;\n    this.after = after;\n  }\n}\n\n/**\n * A un-materialized Set. Typically received when a materialized Set contains\n * another set, the EmbeddedSet does not contain any data to avoid potential\n * issues such as self-reference and infinite recursion\n * @see {@link https://docs.fauna.com/fauna/current/reference/fql_reference/types#set}\n */\nexport class EmbeddedSet {\n  /**\n   * A pagination cursor, used to obtain additional information in the Set.\n   */\n  readonly after: string;\n\n  constructor(after: string) {\n    this.after = after;\n  }\n}\n\n/**\n * A class to provide an iterable API for fetching multiple pages of data, given\n * a Fauna Set\n */\nexport class SetIterator<T extends QueryValue>\n  implements AsyncGenerator<T[], void, unknown>\n{\n  readonly #generator: AsyncGenerator<T[], void, unknown>;\n\n  /**\n   * Constructs a new {@link SetIterator}.\n   *\n   * @remarks Though you can use {@link SetIterator} class directly, it is\n   * most common to create an instance through the {@link Client.paginate} `paginate`\n   * method.\n   *\n   * @typeParam T - The expected type of the items returned from Fauna on each\n   * iteration\n   * @param client - The {@link Client} that will be used to fetch new data on\n   * each iteration\n   * @param initial - An existing fauna Set ({@link Page} or\n   * {@link EmbeddedSet}) or function which returns a promise. If the Promise\n   * resolves to a {@link Page} or {@link EmbeddedSet} then the iterator will\n   * use the client to fetch additional pages of data.\n   * @param options - a {@link QueryOptions} to apply to the queries. Optional.\n   */\n  constructor(\n    client: Client,\n    initial: Page<T> | EmbeddedSet | (() => Promise<T | Page<T> | EmbeddedSet>),\n    options?: QueryOptions,\n  ) {\n    options = options ?? {};\n    if (initial instanceof Function) {\n      this.#generator = generateFromThunk(client, initial, options);\n    } else if (initial instanceof Page || initial instanceof EmbeddedSet) {\n      this.#generator = generatePages(client, initial, options);\n    } else {\n      throw new TypeError(\n        `Expected 'Page<T> | EmbeddedSet | (() => Promise<T | Page<T> | EmbeddedSet>)', but received ${JSON.stringify(\n          initial,\n        )}`,\n      );\n    }\n  }\n\n  /**\n   * Constructs a new {@link SetIterator} from an {@link Query}\n   *\n   * @internal Though you can use {@link SetIterator.fromQuery} directly, it is\n   * intended as a convenience for use in the {@link Client.paginate} method\n   */\n  static fromQuery<T extends QueryValue>(\n    client: Client,\n    query: Query,\n    options?: QueryOptions,\n  ): SetIterator<T> {\n    return new SetIterator<T>(\n      client,\n      async () => {\n        const response = await client.query<T | Page<T> | EmbeddedSet>(\n          query,\n          options,\n        );\n        return response.data;\n      },\n      options,\n    );\n  }\n\n  /**\n   * Constructs a new {@link SetIterator} from an {@link Page} or\n   * {@link EmbeddedSet}\n   *\n   * @internal Though you can use {@link SetIterator.fromPageable} directly, it\n   * is intended as a convenience for use in the {@link Client.paginate} method\n   */\n  static fromPageable<T extends QueryValue>(\n    client: Client,\n    pageable: Page<T> | EmbeddedSet,\n    options?: QueryOptions,\n  ): SetIterator<T> {\n    return new SetIterator<T>(client, pageable, options);\n  }\n\n  /**\n   * Constructs a new {@link FlattenedSetIterator} from the current instance\n   *\n   * @returns A new {@link FlattenedSetIterator} from the current instance\n   */\n  flatten(): FlattenedSetIterator<T> {\n    return new FlattenedSetIterator(this);\n  }\n\n  /** Implement\n   * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator/next| AsyncGenerator.next}\n   * */\n  async next(): Promise<IteratorResult<T[], void>> {\n    return this.#generator.next();\n  }\n\n  /** Implement\n   * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator/return| AsyncGenerator.return}\n   * */\n  async return(): Promise<IteratorResult<T[], void>> {\n    return this.#generator.return();\n  }\n\n  /** Implement\n   * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator/throw| AsyncGenerator.throw}\n   * */\n  async throw(e: any): Promise<IteratorResult<T[], void>> {\n    return this.#generator.throw(e);\n  }\n\n  /** Implement\n   * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator| AsyncGenerator}\n   * */\n  [Symbol.asyncIterator]() {\n    return this;\n  }\n}\n\n/**\n * A class to provide an iterable API for fetching multiple pages of data, given\n * a Fauna Set. This class takes a {@link SetIterator} and flattens the results\n * to yield the items directly.\n */\nexport class FlattenedSetIterator<T extends QueryValue>\n  implements AsyncGenerator<T, void, unknown>\n{\n  readonly #generator: AsyncGenerator<T, void, unknown>;\n\n  /**\n   * Constructs a new {@link FlattenedSetIterator}.\n   *\n   * @remarks Though you can use {@link FlattenedSetIterator} class directly, it\n   * is most common to create an instance through the\n   * {@link SetIterator.flatten} method.\n   *\n   * @typeParam T - The expected type of the items returned from Fauna on each\n   * iteration\n   * @param setIterator - The {@link SetIterator}\n   */\n  constructor(setIterator: SetIterator<T>) {\n    this.#generator = generateItems(setIterator);\n  }\n\n  /** Implement\n   * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator/next| AsyncGenerator.next}\n   * */\n  async next(): Promise<IteratorResult<T, void>> {\n    return this.#generator.next();\n  }\n\n  /** Implement\n   * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator/return| AsyncGenerator.return}\n   * */\n  async return(): Promise<IteratorResult<T, void>> {\n    return this.#generator.return();\n  }\n\n  /** Implement\n   * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator/throw| AsyncGenerator.throw}\n   * */\n  async throw(e: any): Promise<IteratorResult<T, void>> {\n    return this.#generator.throw(e);\n  }\n\n  /** Implement\n   * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator| AsyncGenerator}\n   * */\n  [Symbol.asyncIterator]() {\n    return this;\n  }\n}\n\n/**\n * Internal async generator function to use with {@link Page} and\n * {@link EmbeddedSet} values\n */\nasync function* generatePages<T extends QueryValue>(\n  client: Client,\n  initial: Page<T> | EmbeddedSet,\n  options: QueryOptions,\n): AsyncGenerator<T[], void, unknown> {\n  let currentPage = initial;\n\n  if (currentPage instanceof Page) {\n    yield currentPage.data;\n  }\n\n  while (currentPage.after) {\n    // cursor means there is more data to fetch\n    const query = fql`Set.paginate(${currentPage.after})`;\n    const response = await client.query<Page<T>>(query, options);\n    const nextPage = response.data;\n\n    currentPage = nextPage;\n    yield currentPage.data;\n  }\n}\n\n/**\n * Internal async generator function to use with a function that returns a\n * promise of data. If the promise resolves to a {@link Page} or\n * {@link EmbeddedSet} then continue iterating.\n */\nasync function* generateFromThunk<T extends QueryValue>(\n  client: Client,\n  thunk: () => Promise<T | Page<T> | EmbeddedSet>,\n  options: QueryOptions,\n): AsyncGenerator<T[], void, unknown> {\n  const result = await thunk();\n\n  if (result instanceof Page || result instanceof EmbeddedSet) {\n    for await (const page of generatePages(\n      client,\n      result as Page<T> | EmbeddedSet,\n      options,\n    )) {\n      yield page;\n    }\n    return;\n  }\n\n  yield [result];\n}\n\n/**\n * Internal async generator function that flattens a {@link SetIterator}\n */\nasync function* generateItems<T extends QueryValue>(\n  setIterator: SetIterator<T>,\n) {\n  for await (const page of setIterator) {\n    for (const item of page) {\n      yield item;\n    }\n  }\n}\n", "import {\n  FeedSuccess,\n  QueryValue,\n  StreamEventData,\n  QueryStats,\n} from \"../wire-protocol\";\nimport { getServiceError } from \"../errors\";\n\n/**\n * A token used to initiate a Fauna event source at a particular snapshot in time.\n *\n * The example below shows how to request an event token from Fauna and use it\n * to establish an event steam.\n *\n * @example\n * ```javascript\n *  const response = await client.query(fql`\n *    Messages.byRecipient(User.byId(\"1234\"))\n *  `);\n *  const eventSource = response.data;\n *\n *  const stream = client.stream(eventSource)\n *    .on(\"add\", (event) => console.log(\"New message\", event))\n *\n *  stream.start();\n * ```\n */\nexport interface EventSource {\n  readonly token: string;\n}\n\nexport function isEventSource(value: any): value is EventSource {\n  if (typeof value.token === \"string\") {\n    return true;\n  }\n\n  return false;\n}\n\nexport class StreamToken implements EventSource {\n  readonly token: string;\n\n  constructor(token: string) {\n    this.token = token;\n  }\n}\n\n/**\n * A class to represent a page of events from a Fauna stream.\n */\nexport class FeedPage<T extends QueryValue> {\n  readonly events: IterableIterator<StreamEventData<T>>;\n  readonly cursor: string;\n  readonly hasNext: boolean;\n  readonly stats?: QueryStats;\n\n  constructor({ events, cursor, has_next, stats }: FeedSuccess<T>) {\n    this.events = this.#toEventIterator(events);\n    this.cursor = cursor;\n    this.hasNext = has_next;\n    this.stats = stats;\n  }\n\n  *#toEventIterator(\n    events: FeedSuccess<T>[\"events\"],\n  ): IterableIterator<StreamEventData<T>> {\n    // A page of events may contain an error event. These won't be reported\n    // at a response level, so we need to check for them here. They are\n    // considered fatal. Pages end at the first error event.\n    for (const event of events) {\n      if (event.type === \"error\") {\n        throw getServiceError(event);\n      }\n\n      yield event;\n    }\n  }\n}\n", "import { TaggedTypeFormat } from \"./tagged-type\";\nimport type {\n  FQLFragment,\n  QueryValue,\n  QueryInterpolation,\n} from \"./wire-protocol\";\n\n/**\n * A QueryArgumentObject is a plain javascript object where each property is a\n * valid QueryArgument.\n */\nexport type QueryArgumentObject = {\n  [key: string]: QueryArgument;\n};\n\n/**\n * A QueryArgument represents all possible values that can be encoded and passed\n * to Fauna as a query argument.\n *\n * The {@link fql} tagged template function requires all arguments to be of type\n * QueryArgument.\n */\nexport type QueryArgument =\n  | QueryValue\n  | Query<any>\n  | Date\n  | ArrayBuffer\n  | Uint8Array\n  | Array<QueryArgument>\n  | QueryArgumentObject;\n\n/**\n * Creates a new Query. Accepts template literal inputs.\n * @typeParam T - The expected type of the response from Fauna when evaluated.\n * @param queryFragments - An array that constitutes\n *   the strings that are the basis of the query.\n * @param queryArgs - an Array\\<QueryValue | Query\\> that\n *   constitute the arguments to inject between the queryFragments.\n * @throws Error - if you call this method directly (not using template\n *   literals) and pass invalid construction parameters\n * @example\n * ```typescript\n *  const str = \"baz\";\n *  const num = 17;\n *  const innerQuery = fql`${num} + 3)`;\n *  const queryRequestBuilder = fql`${str}.length == ${innerQuery}`;\n * ```\n */\nexport function fql<T extends QueryValue = any>(\n  queryFragments: ReadonlyArray<string>,\n  ...queryArgs: QueryArgument[]\n): Query<T> {\n  return new Query<T>(queryFragments, ...queryArgs);\n}\n\n/**\n * Internal class.\n * A builder for composing queries using the {@link fql} tagged template\n * function\n * @typeParam T - The expected type of the response from Fauna when evaluated.\n *   T can be used to infer the type of the response type from {@link Client}\n *   methods.\n */\nexport class Query<T extends QueryValue = any> {\n  readonly #queryFragments: ReadonlyArray<string>;\n  readonly #interpolatedArgs: QueryArgument[];\n  /**\n   * A phantom field to enforce the type of the Query.\n   * @internal\n   *\n   * We need to provide an actual property of type `T` for Typescript to\n   * actually enforce it.\n   *\n   * \"Because TypeScript is a structural type system, type parameters only\n   * affect the resulting type when consumed as part of the type of a member.\"\n   *\n   * @see {@link https://www.typescriptlang.org/docs/handbook/type-compatibility.html#generics}\n   */\n  readonly #__phantom: T;\n\n  constructor(\n    queryFragments: ReadonlyArray<string>,\n    ...queryArgs: QueryArgument[]\n  ) {\n    if (\n      queryFragments.length === 0 ||\n      queryFragments.length !== queryArgs.length + 1\n    ) {\n      throw new Error(\"invalid query constructed\");\n    }\n    this.#queryFragments = queryFragments;\n    this.#interpolatedArgs = queryArgs;\n\n    // HACK: We have to construct the phantom field, but we don't have any value for it.\n    this.#__phantom = undefined as unknown as T;\n  }\n\n  /**\n   * Converts this Query to an {@link FQLFragment} you can send\n   * to Fauna.\n   * @returns a {@link FQLFragment}.\n   * @example\n   * ```typescript\n   *  const num = 8;\n   *  const queryBuilder = fql`'foo'.length == ${num}`;\n   *  const queryRequest = queryBuilder.toQuery();\n   *  // produces:\n   *  { fql: [\"'foo'.length == \", { value: { \"@int\": \"8\" } }, \"\"] }\n   * ```\n   */\n  encode(): FQLFragment {\n    if (this.#queryFragments.length === 1) {\n      return { fql: [this.#queryFragments[0]] };\n    }\n\n    let renderedFragments: (string | QueryInterpolation)[] =\n      this.#queryFragments.flatMap((fragment, i) => {\n        // There will always be one more fragment than there are arguments\n        if (i === this.#queryFragments.length - 1) {\n          return fragment === \"\" ? [] : [fragment];\n        }\n\n        // arguments in the template format must always be encoded, regardless\n        // of the \"x-format\" request header\n        // TODO: catch and rethrow Errors, indicating bad user input\n        const arg = this.#interpolatedArgs[i];\n        const encoded = TaggedTypeFormat.encodeInterpolation(arg);\n\n        return [fragment, encoded];\n      });\n\n    // We don't need to send empty-string fragments over the wire\n    renderedFragments = renderedFragments.filter((x) => x !== \"\");\n\n    return { fql: renderedFragments };\n  }\n}\n", "//THIS FILE IS AUTOGENERATED. DO NOT EDIT. SEE .husky/pre-commit\n\n/** The current package version. */\nexport const packageVersion = \"2.3.0\";\n", "import { packageVersion } from \"./package-version\";\n\nlet os: any;\ntry {\n  os = require(\"node:os\");\n} catch (_) {\n  os = undefined;\n}\n\n/**\n * Function to put all of the environment details together.\n * @internal\n */\nexport const getDriverEnv = (): string => {\n  const driverEnv = {\n    driver: [\"javascript\", packageVersion].join(\"-\"),\n    env: \"unknown\",\n    os: \"unknown\",\n    runtime: \"unknown\",\n  };\n\n  try {\n    /**\n     * Determine if we're executing in a Node environment\n     */\n    const isNode =\n      typeof window === \"undefined\" &&\n      typeof process !== \"undefined\" &&\n      process.versions != null &&\n      process.versions.node != null;\n\n    /**\n     * Determine if we're executing in a Node environment\n     */\n    const isBrowser =\n      typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\n\n    /**\n     * Determine if we're executing in a Service Worker environment\n     */\n    const isServiceWorker =\n      typeof self === \"object\" &&\n      self.constructor &&\n      self.constructor.name === \"DedicatedWorkerGlobalScope\";\n\n    /**\n     * Determine if we're executing in Vercel's Edge Runtime\n     * @see {@link https://vercel.com/docs/concepts/functions/edge-functions/edge-runtime#check-if-you're-running-on-the-edge-runtime}\n     */\n    // @ts-expect-error Cannot find name 'EdgeRuntime'\n    const isVercelEdgeRuntime = typeof EdgeRuntime !== \"string\";\n\n    if (isNode) {\n      driverEnv.runtime = [\"nodejs\", process.version].join(\"-\");\n      driverEnv.env = getNodeRuntimeEnv();\n      driverEnv.os = [os.platform(), os.release()].join(\"-\");\n    } else if (isServiceWorker) {\n      driverEnv.runtime = getBrowserDetails(navigator);\n      driverEnv.env = \"Service Worker\";\n      driverEnv.os = getBrowserOsDetails(navigator);\n    } else if (isBrowser) {\n      driverEnv.runtime = getBrowserDetails(navigator);\n      driverEnv.env = \"browser\";\n      driverEnv.os = getBrowserOsDetails(navigator);\n    } else if (isVercelEdgeRuntime) {\n      driverEnv.runtime = \"Vercel Edge Runtime\";\n      driverEnv.env = \"edge\";\n    }\n  } catch (e) {\n    // ignore errors trying to report on user environment\n  }\n\n  return (\n    Object.entries(driverEnv)\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      .filter(([_, val]) => val !== \"unknown\")\n      .map((entry: [string, string]) => entry.join(\"=\"))\n      .join(\"; \")\n  );\n};\n\n/**\n * Get browser environment details\n */\nconst getBrowserDetails = (navigator: Navigator | WorkerNavigator): string => {\n  let browser: string = navigator.appName;\n  let browserVersion = \"\" + parseFloat(navigator.appVersion);\n  let nameOffset, verOffset, ix;\n\n  // Opera\n  if ((verOffset = navigator.userAgent.indexOf(\"Opera\")) != -1) {\n    browser = \"Opera\";\n    browserVersion = navigator.userAgent.substring(verOffset + 6);\n    if ((verOffset = navigator.userAgent.indexOf(\"Version\")) != -1) {\n      browserVersion = navigator.userAgent.substring(verOffset + 8);\n    }\n  }\n  // MSIE\n  else if ((verOffset = navigator.userAgent.indexOf(\"MSIE\")) != -1) {\n    browser = \"Microsoft Internet Explorer\";\n    browserVersion = navigator.userAgent.substring(verOffset + 5);\n  }\n\n  //IE 11 no longer identifies itself as MS IE, so trap it\n  //http://stackoverflow.com/questions/17907445/how-to-detect-ie11\n  else if (\n    browser == \"Netscape\" &&\n    navigator.userAgent.indexOf(\"Trident/\") != -1\n  ) {\n    browser = \"Microsoft Internet Explorer\";\n    browserVersion = navigator.userAgent.substring(verOffset + 5);\n    if ((verOffset = navigator.userAgent.indexOf(\"rv:\")) != -1) {\n      browserVersion = navigator.userAgent.substring(verOffset + 3);\n    }\n  }\n\n  // Chrome\n  else if ((verOffset = navigator.userAgent.indexOf(\"Chrome\")) != -1) {\n    browser = \"Chrome\";\n    browserVersion = navigator.userAgent.substring(verOffset + 7);\n  }\n  // Safari\n  else if ((verOffset = navigator.userAgent.indexOf(\"Safari\")) != -1) {\n    browser = \"Safari\";\n    browserVersion = navigator.userAgent.substring(verOffset + 7);\n    if ((verOffset = navigator.userAgent.indexOf(\"Version\")) != -1) {\n      browserVersion = navigator.userAgent.substring(verOffset + 8);\n    }\n\n    // Chrome on iPad identifies itself as Safari. Actual results do not match what Google claims\n    //  at: https://developers.google.com/chrome/mobile/docs/user-agent?hl=ja\n    //  No mention of chrome in the user agent string. However it does mention CriOS, which presumably\n    //  can be keyed on to detect it.\n    if (navigator.userAgent.indexOf(\"CriOS\") != -1) {\n      //Chrome on iPad spoofing Safari...correct it.\n      browser = \"Chrome\";\n      //Don't believe there is a way to grab the accurate version number, so leaving that for now.\n    }\n  }\n  // Firefox\n  else if ((verOffset = navigator.userAgent.indexOf(\"Firefox\")) != -1) {\n    browser = \"Firefox\";\n    browserVersion = navigator.userAgent.substring(verOffset + 8);\n  }\n  // Other browsers\n  else if (\n    (nameOffset = navigator.userAgent.lastIndexOf(\" \") + 1) <\n    (verOffset = navigator.userAgent.lastIndexOf(\"/\"))\n  ) {\n    browser = navigator.userAgent.substring(nameOffset, verOffset);\n    browserVersion = navigator.userAgent.substring(verOffset + 1);\n    if (browser.toLowerCase() == browser.toUpperCase()) {\n      browser = navigator.appName;\n    }\n  }\n  // trim the browser version string\n  if ((ix = browserVersion.indexOf(\";\")) != -1)\n    browserVersion = browserVersion.substring(0, ix);\n  if ((ix = browserVersion.indexOf(\" \")) != -1)\n    browserVersion = browserVersion.substring(0, ix);\n  if ((ix = browserVersion.indexOf(\")\")) != -1)\n    browserVersion = browserVersion.substring(0, ix);\n\n  return [browser, browserVersion].join(\"-\");\n};\n\n/**\n * Get OS details for the browser\n */\nconst getBrowserOsDetails = (\n  navigator: Navigator | WorkerNavigator\n): string => {\n  let os = \"unknown\";\n  const clientStrings = [\n    { s: \"Windows 10\", r: /(Windows 10.0|Windows NT 10.0)/ },\n    { s: \"Windows 8.1\", r: /(Windows 8.1|Windows NT 6.3)/ },\n    { s: \"Windows 8\", r: /(Windows 8|Windows NT 6.2)/ },\n    { s: \"Windows 7\", r: /(Windows 7|Windows NT 6.1)/ },\n    { s: \"Windows Vista\", r: /Windows NT 6.0/ },\n    { s: \"Windows Server 2003\", r: /Windows NT 5.2/ },\n    { s: \"Windows XP\", r: /(Windows NT 5.1|Windows XP)/ },\n    { s: \"Windows 2000\", r: /(Windows NT 5.0|Windows 2000)/ },\n    { s: \"Windows ME\", r: /(Win 9x 4.90|Windows ME)/ },\n    { s: \"Windows 98\", r: /(Windows 98|Win98)/ },\n    { s: \"Windows 95\", r: /(Windows 95|Win95|Windows_95)/ },\n    { s: \"Windows NT 4.0\", r: /(Windows NT 4.0|WinNT4.0|WinNT|Windows NT)/ },\n    { s: \"Windows CE\", r: /Windows CE/ },\n    { s: \"Windows 3.11\", r: /Win16/ },\n    { s: \"Android\", r: /Android/ },\n    { s: \"Open BSD\", r: /OpenBSD/ },\n    { s: \"Sun OS\", r: /SunOS/ },\n    { s: \"Chrome OS\", r: /CrOS/ },\n    { s: \"Linux\", r: /(Linux|X11(?!.*CrOS))/ },\n    { s: \"iOS\", r: /(iPhone|iPad|iPod)/ },\n    { s: \"Mac OS X\", r: /Mac OS X/ },\n    { s: \"Mac OS\", r: /(Mac OS|MacPPC|MacIntel|Mac_PowerPC|Macintosh)/ },\n    { s: \"QNX\", r: /QNX/ },\n    { s: \"UNIX\", r: /UNIX/ },\n    { s: \"BeOS\", r: /BeOS/ },\n    { s: \"OS/2\", r: /OS\\/2/ },\n    {\n      s: \"Search Bot\",\n      r: /(nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask Jeeves\\/Teoma|ia_archiver)/,\n    },\n  ];\n  for (const id in clientStrings) {\n    const cs = clientStrings[id];\n    if (cs.r.test(navigator.userAgent)) {\n      os = cs.s;\n      break;\n    }\n  }\n\n  let osVersion: string | undefined = \"unknown\";\n\n  if (/Windows/.test(os)) {\n    osVersion;\n    const matches = /Windows (.*)/.exec(os);\n    if (matches) {\n      osVersion = matches[1];\n    }\n    os = \"Windows\";\n  }\n\n  switch (os) {\n    case \"Mac OS\":\n    case \"Mac OS X\":\n    case \"Android\": {\n      const matches =\n        /(?:Android|Mac OS|Mac OS X|MacPPC|MacIntel|Mac_PowerPC|Macintosh) ([._\\d]+)/.exec(\n          navigator.userAgent\n        );\n      if (matches) {\n        osVersion = matches[1];\n      }\n      break;\n    }\n\n    case \"iOS\": {\n      const matches = /OS (\\d+)_(\\d+)_?(\\d+)?/.exec(navigator.appVersion);\n      if (matches) {\n        osVersion = matches[1] + \".\" + matches[2] + \".\" + (matches[3] ?? 0);\n      }\n      break;\n    }\n  }\n  return [os, osVersion].join(\"-\");\n};\n\nconst crossGlobal =\n  typeof window !== \"undefined\"\n    ? window\n    : typeof globalThis !== \"undefined\"\n    ? globalThis\n    : typeof global !== \"undefined\"\n    ? global\n    : self;\n\n/**\n * Get node environment details\n */\nconst getNodeRuntimeEnv = (): string => {\n  // return early if process variables are not available\n  if (\n    !(\n      typeof process !== \"undefined\" &&\n      process &&\n      process.env &&\n      typeof process.env === \"object\"\n    )\n  ) {\n    return \"unknown\";\n  }\n\n  const runtimeEnvs = [\n    {\n      name: \"Netlify\",\n      check: function (): boolean {\n        return !!process.env[\"NETLIFY_IMAGES_CDN_DOMAIN\"];\n      },\n    },\n    {\n      name: \"Vercel\",\n      check: function (): boolean {\n        return !!process.env[\"VERCEL\"];\n      },\n    },\n    {\n      name: \"Heroku\",\n      check: function (): boolean {\n        return (\n          !!process.env[\"PATH\"] && process.env.PATH.indexOf(\".heroku\") !== -1\n        );\n      },\n    },\n    {\n      name: \"AWS Lambda\",\n      check: function (): boolean {\n        return !!process.env[\"AWS_LAMBDA_FUNCTION_VERSION\"];\n      },\n    },\n    {\n      name: \"GCP Cloud Functions\",\n      check: function (): boolean {\n        return !!process.env[\"_\"] && process.env._.indexOf(\"google\") !== -1;\n      },\n    },\n    {\n      name: \"GCP Compute Instances\",\n      check: function (): boolean {\n        return !!process.env[\"GOOGLE_CLOUD_PROJECT\"];\n      },\n    },\n    {\n      name: \"Azure Cloud Functions\",\n      check: function (): boolean {\n        return !!process.env[\"WEBSITE_FUNCTIONS_AZUREMONITOR_CATEGORIES\"];\n      },\n    },\n    {\n      name: \"Azure Compute\",\n      check: function (): boolean {\n        return (\n          !!process.env[\"ORYX_ENV_TYPE\"] &&\n          !!process.env[\"WEBSITE_INSTANCE_ID\"] &&\n          process.env.ORYX_ENV_TYPE === \"AppService\"\n        );\n      },\n    },\n    {\n      name: \"Mongo Stitch\",\n      check: function (): boolean {\n        // @ts-expect-error Element implicitly has an 'any' type because type 'typeof globalThis' has no index signature.ts(7017)\n        return typeof crossGlobal?.StitchError === \"function\";\n      },\n    },\n    {\n      name: \"Render\",\n      check: function (): boolean {\n        return !!process.env[\"RENDER_SERVICE_ID\"];\n      },\n    },\n    {\n      name: \"Begin\",\n      check: function (): boolean {\n        return !!process.env[\"BEGIN_DATA_SCOPE_ID\"];\n      },\n    },\n  ];\n  const detectedEnv = runtimeEnvs.find((env) => env.check());\n\n  return detectedEnv ? detectedEnv.name : \"unknown\";\n};\n", "export type RetryOptions = {\n  maxAttempts: number;\n  maxBackoff: number;\n  shouldRetry?: (error: any) => boolean;\n  attempt?: number;\n  sleepFn?: (callback: (args: void) => void, ms?: number) => void;\n};\n\nexport const withRetries = async <T>(\n  fn: () => Promise<T>,\n  {\n    maxAttempts,\n    maxBackoff,\n    shouldRetry = () => true,\n    attempt = 0,\n    sleepFn = setTimeout,\n  }: RetryOptions,\n): Promise<T> => {\n  const backoffMs =\n    attempt > 0\n      ? Math.min(Math.random() * 2 ** attempt, maxBackoff) * 1_000\n      : 0;\n  attempt += 1;\n\n  try {\n    return await fn();\n  } catch (error: any) {\n    if (attempt >= maxAttempts || shouldRetry(error) !== true) {\n      throw error;\n    }\n\n    await new Promise((resolve) => sleepFn(resolve, backoffMs));\n    return withRetries(fn, {\n      maxAttempts,\n      maxBackoff,\n      shouldRetry,\n      attempt,\n      sleepFn,\n    });\n  }\n};\n", "import { QueryArgumentObject } from \"./query-builder\";\nimport {\n  DateStub,\n  Document,\n  DocumentReference,\n  EmbeddedSet,\n  Module,\n  NamedDocument,\n  NamedDocumentReference,\n  NullDocument,\n  Page,\n  StreamToken,\n  TimeStub,\n} from \"./values\";\n\n/**\n * A request to make to Fauna.\n */\nexport interface QueryRequest<\n  T extends string | QueryInterpolation = string | QueryInterpolation,\n> {\n  /** The query */\n  query: T;\n\n  /** Optional arguments. Variables in the query will be initialized to the\n   * value associated with an argument key.\n   */\n  arguments?: EncodedObject;\n}\n\n/**\n * Options for queries. Each query can be made with different options. Settings here\n * take precedence over those in {@link ClientConfiguration}.\n */\nexport interface QueryOptions {\n  /** Optional arguments. Variables in the query will be initialized to the\n   * value associated with an argument key.\n   */\n  arguments?: QueryArgumentObject;\n\n  /**\n   * Determines the encoded format expected for the query `arguments` field, and\n   * the `data` field of a successful response.\n   * Overrides the optional setting on the {@link ClientConfiguration}.\n   */\n  format?: ValueFormat;\n\n  /**\n   * If true, unconditionally run the query as strictly serialized.\n   * This affects read-only transactions. Transactions which write\n   * will always be strictly serialized.\n   * Overrides the optional setting on the {@link ClientConfiguration}.\n   */\n  linearized?: boolean;\n\n  /**\n   * Controls what Javascript type to deserialize {@link https://docs.fauna.com/fauna/current/reference/fql_reference/types#long | Fauna longs} to.\n   * Use 'number' to deserialize longs to number. Use 'bigint' to deserialize to bigint. Defaults to 'number'.\n   * Note, for extremely large maginitude numbers Javascript's number will lose precision; as Javascript's\n   * 'number' can only support +/- 2^53-1 whereas Fauna's long is 64 bit. If this is detected, a warning will\n   * be logged to the console and precision loss will occur.\n   * If your application uses extremely large magnitude numbers use 'bigint'.\n   */\n  long_type?: \"number\" | \"bigint\";\n\n  /**\n   * The max number of times to retry the query if contention is encountered.\n   *Overrides the optional setting on the {@link ClientConfiguration}.\n   */\n  max_contention_retries?: number;\n\n  /**\n   * Tags provided back via logging and telemetry.\n   * Overrides the optional setting on the {@link ClientConfiguration}.\n   */\n  query_tags?: Record<string, string>;\n\n  /**\n   * The timeout to use in this query in milliseconds.\n   * Overrides the optional setting on the {@link ClientConfiguration}.\n   */\n  query_timeout_ms?: number;\n\n  /**\n   * A traceparent provided back via logging and telemetry.\n   * Must match format: https://www.w3.org/TR/trace-context/#traceparent-header\n   * Overrides the optional setting on the {@link ClientConfiguration}.\n   */\n  traceparent?: string;\n\n  /**\n   * Enable or disable typechecking of the query before evaluation. If no value\n   * is provided, the value of `typechecked` in the database configuration will\n   * be used.\n   * Overrides the optional setting on the {@link ClientConfiguration}.\n   */\n  typecheck?: boolean;\n\n  /**\n   * Secret to use instead of the client's secret.\n   */\n  secret?: string;\n}\n\n/**\n * tagged declares that type information is transmitted and received by the driver.\n * \"simple\" indicates it is not - pure JSON is used.\n * \"decorated\" will cause the service output to be shown in FQL syntax that could\n * hypothetically be used to query Fauna. This is intended to support CLI and\n * REPL like tools.\n * @example\n * ```typescript\n * // example of decorated output\n * { time: Time(\"2012-01-01T00:00:00Z\") }\n * ```\n */\nexport declare type ValueFormat = \"simple\" | \"tagged\" | \"decorated\";\n\nexport type QueryStats = {\n  /** The amount of Transactional Compute Ops consumed by the query. */\n  compute_ops: number;\n  /** The amount of Transactional Read Ops consumed by the query. */\n  read_ops: number;\n  /** The amount of Transactional Write Ops consumed by the query. */\n  write_ops: number;\n  /** The query run time in milliseconds. */\n  query_time_ms: number;\n  /** The amount of data read from storage, in bytes. */\n  storage_bytes_read: number;\n  /** The amount of data written to storage, in bytes. */\n  storage_bytes_write: number;\n  /** The number of times the transaction was retried due to write contention. */\n  contention_retries: number;\n  /** The number query attempts made due to retryable errors. */\n  attempts: number;\n  /**\n   * A list of rate limits hit.\n   * Included with QueryFailure responses when the query is rate limited.\n   */\n  rate_limits_hit?: (\"read\" | \"write\" | \"compute\")[];\n};\n\nexport type QueryInfo = {\n  /** The last transaction timestamp of the query. A Unix epoch in microseconds. */\n  txn_ts?: number;\n  /** The schema version that was used for the query execution. */\n  schema_version?: number;\n  /** A readable summary of any warnings or logs emitted by the query. */\n  summary?: string;\n  /** The value of the x-query-tags header, if it was provided. */\n  query_tags?: Record<string, string>;\n  /** Stats on query performance and cost */\n  stats?: QueryStats;\n};\n\n/**\n * A decoded response from a successful query to Fauna\n */\nexport type QuerySuccess<T extends QueryValue> = QueryInfo & {\n  /**\n   * The result of the query. The data is any valid JSON value.\n   * @remarks\n   * data is type parameterized so that you can treat it as a\n   * certain type if you are using typescript.\n   */\n  data: T;\n  /** The query's inferred static result type. */\n  static_type?: string;\n};\n\n/**\n * A decoded response from a failed query to Fauna. Integrations which only want to report a human\n * readable version of the failure can simply print out the \"summary\" field.\n */\nexport type QueryFailure = QueryInfo & {\n  /**\n   * The result of the query resulting in\n   */\n  error: {\n    /** A predefined code which indicates the type of error. See XXX for a list of error codes. */\n    code: string;\n    /** A short, human readable description of the error */\n    message: string;\n    /**\n     * A machine readable description of any constraint failures encountered by the query.\n     * Present only if this query encountered constraint failures.\n     */\n    constraint_failures?: Array<ConstraintFailure>;\n    /**\n     * The user provided value passed to the originating `abort()` call.\n     * Present only when the query encountered an `abort()` call, which is\n     * denoted by the error code `\"abort\"`\n     */\n    abort?: QueryValue;\n  };\n};\n\n/**\n * A constraint failure triggered by a query.\n */\nexport type ConstraintFailure = {\n  /** Description of the constraint failure */\n  message: string;\n  /** Name of the failed constraint */\n  name?: string;\n  /** Path into the write input data to which the failure applies */\n  paths?: Array<Array<number | string>>;\n};\n\nexport type QueryResponse<T extends QueryValue> =\n  | QuerySuccess<T>\n  | QueryFailure;\n\nexport const isQuerySuccess = (res: any): res is QuerySuccess<any> =>\n  res instanceof Object && \"data\" in res;\n\nexport const isQueryFailure = (res: any): res is QueryFailure =>\n  res instanceof Object &&\n  \"error\" in res &&\n  res.error instanceof Object &&\n  \"code\" in res.error &&\n  \"message\" in res.error;\n\nexport const isQueryResponse = (res: any): res is QueryResponse<any> =>\n  isQueryResponse(res) || isQueryFailure(res);\n\n/**\n * A piece of an interpolated query. Interpolated queries can be safely composed\n * together without concern of query string injection.\n * @see {@link ValueFragment} and {@link FQLFragment} for additional\n * information\n */\nexport type QueryInterpolation =\n  | FQLFragment\n  | ValueFragment\n  | ObjectFragment\n  | ArrayFragment;\n\n/**\n * A piece of an interpolated query that represents an actual value. Arguments\n * are passed to fauna using ValueFragments so that query string injection is\n * not possible.\n * @remarks A ValueFragment is created by this driver when a literal value or\n * object is provided as an argument to the {@link fql} tagged template\n * function.\n *\n * ValueFragments must always be encoded with tags, regardless of the \"x-format\"\n * request header sent.\n * @example\n * ```typescript\n *  const num = 17;\n *  const query = fql`${num} + 3)`;\n *  // produces\n *  { \"fql\": [{ \"value\": { \"@int\": \"17\" } }, \" + 3\"] }\n * ```\n */\nexport type ValueFragment = { value: TaggedType };\n\n/**\n * A piece of an interpolated query that represents an object. Arguments\n * are passed to fauna using ObjectFragments so that query arguments can be\n * nested within javascript objects.\n *\n * ObjectFragments must always be encoded with tags, regardless of the\n * \"x-format\" request header sent.\n * @example\n * ```typescript\n *  const arg = { startDate: DateStub.from(\"2023-09-01\") };\n *  const query = fql`${arg})`;\n *  // produces\n *  {\n *\t\t\"fql\": [\n *\t\t\t{\n *\t\t\t\t\"object\": {\n *          \"startDate\": {\n *\t\t\t\t\t\t\"value\": { \"@date\": \"2023-09-01\" } // Object field values have type QueryInterpolation\n *\t\t\t\t\t}\n *\t\t\t\t}\n *\t\t\t}\n *\t\t]\n *\t}\n * ```\n */\nexport type ObjectFragment = { object: EncodedObject };\n\n/**\n * A piece of an interpolated query that represents an array. Arguments\n * are passed to fauna using ArrayFragments so that query arguments can be\n * nested within javascript arrays.\n *\n * ArrayFragments must always be encoded with tags, regardless of the \"x-format\"\n * request header sent.\n * @example\n * ```typescript\n *  const arg = [1, 2];\n *  const query = fql`${arg})`;\n *  // produces\n *  {\n *\t\t\"fql\": [\n *\t\t\t{\n *\t\t\t\t\"array\": [\n *\t\t\t\t\t{ \"value\": { \"@int\": \"1\" } }, // Array items have type QueryInterpolation\n *\t\t\t\t\t{ \"value\": { \"@int\": \"2\" } }\n *\t\t\t\t]\n *\t\t\t}\n *\t\t]\n *\t}\n * ```\n */\nexport type ArrayFragment = { array: TaggedType[] };\n\n/**\n * A piece of an interpolated query. Interpolated Queries can be safely composed\n * together without concern of query string injection.\n * @remarks A FQLFragment is created when calling the {@link fql} tagged\n * template function and can be passed as an argument to other Querys.\n * @example\n * ```typescript\n *  const num = 17;\n *  const query1 = fql`${num} + 3)`;\n *  const query2 = fql`5 + ${query1})`;\n *  // produces\n *  { \"fql\": [\"5 + \", { \"fql\": [{ \"value\": { \"@int\": \"17\" } }, \" + 3\"] }] }\n * ```\n */\nexport type FQLFragment = { fql: (string | QueryInterpolation)[] };\n\n/**\n * A source span indicating a segment of FQL.\n */\nexport interface Span {\n  /**\n   * A string identifier of the FQL source. For example, if performing\n   * a raw query against the API this would be *query*.\n   */\n  src: string;\n  /**\n   * The span's starting index within the src, inclusive.\n   */\n  start: number;\n  /**\n   * The span's ending index within the src, inclusive.\n   */\n  end: number;\n  /**\n   * The name of the enclosing function, if applicable.\n   */\n  function: string;\n}\n\n/**\n * A QueryValueObject is a plain javascript object where each value is a valid\n * QueryValue.\n * These objects can be returned in {@link QuerySuccess}.\n */\nexport type QueryValueObject = {\n  [key: string]: QueryValue;\n};\n\n/**\n * A QueryValue represents the possible return values in a {@link QuerySuccess}.\n */\nexport type QueryValue =\n  // plain javascript values\n  | null\n  | string\n  | number\n  | bigint\n  | boolean\n  | QueryValueObject\n  | Array<QueryValue>\n  | Uint8Array\n  // client-provided classes\n  | DateStub\n  | TimeStub\n  | Module\n  | Document\n  | DocumentReference\n  | NamedDocument\n  | NamedDocumentReference\n  | NullDocument\n  | Page<QueryValue>\n  | EmbeddedSet\n  | StreamToken;\n\nexport type StreamRequest = {\n  token: string;\n  start_ts?: number;\n  cursor?: string;\n};\n\nexport type StreamEventType = \"status\" | \"add\" | \"remove\" | \"update\" | \"error\";\nexport type StreamEventStatus = {\n  type: \"status\";\n  txn_ts: number;\n  cursor: string;\n  stats: QueryStats;\n};\nexport type StreamEventData<T extends QueryValue> = {\n  type: \"add\" | \"remove\" | \"update\";\n  txn_ts: number;\n  cursor: string;\n  stats: QueryStats;\n  data: T;\n};\nexport type StreamEventError = { type: \"error\" } & QueryFailure;\nexport type StreamEvent<T extends QueryValue> =\n  | StreamEventStatus\n  | StreamEventData<T>\n  | StreamEventError;\n\nexport type FeedRequest = StreamRequest & {\n  page_size?: number;\n};\n\nexport type FeedSuccess<T extends QueryValue> = {\n  events: (StreamEventData<T> | StreamEventError)[];\n  cursor: string;\n  has_next: boolean;\n  stats?: QueryStats;\n};\n\nexport type FeedError = QueryFailure;\n\nexport type TaggedBytes = { \"@bytes\": string };\nexport type TaggedDate = { \"@date\": string };\nexport type TaggedDouble = { \"@double\": string };\nexport type TaggedInt = { \"@int\": string };\nexport type TaggedLong = { \"@long\": string };\nexport type TaggedMod = { \"@mod\": string };\nexport type TaggedObject = { \"@object\": QueryValueObject };\nexport type TaggedRef = {\n  \"@ref\": { id: string; coll: TaggedMod } | { name: string; coll: TaggedMod };\n};\n// WIP: core does not accept `@set` tagged values\n// type TaggedSet = { \"@set\": { data: QueryValue[]; after?: string } };\nexport type TaggedTime = { \"@time\": string };\n\nexport type EncodedObject = { [key: string]: TaggedType };\n\nexport type TaggedType =\n  | string\n  | boolean\n  | null\n  | EncodedObject\n  | TaggedBytes\n  | TaggedDate\n  | TaggedDouble\n  | TaggedInt\n  | TaggedLong\n  | TaggedMod\n  | TaggedObject\n  | TaggedRef\n  | TaggedTime\n  | TaggedType[];\n", "import {\n  FeedClientConfiguration,\n  ClientConfiguration,\n  StreamClientConfiguration,\n  endpoints,\n} from \"./client-configuration\";\nimport {\n  ClientClosedError,\n  ClientError,\n  FaunaError,\n  NetworkError,\n  ProtocolError,\n  ServiceError,\n  ThrottlingError,\n  getServiceError,\n} from \"./errors\";\nimport {\n  HTTPStreamClient,\n  StreamAdapter,\n  getDefaultHTTPClient,\n  isStreamClient,\n  isHTTPResponse,\n  type HTTPClient,\n  HTTPRequest,\n  FaunaAPIPaths,\n} from \"./http-client\";\nimport { Query } from \"./query-builder\";\nimport { TaggedTypeFormat } from \"./tagged-type\";\nimport { getDriverEnv } from \"./util/environment\";\nimport { withRetries } from \"./util/retryable\";\nimport {\n  FeedPage,\n  EmbeddedSet,\n  Page,\n  SetIterator,\n  EventSource,\n  isEventSource,\n} from \"./values\";\nimport {\n  FeedRequest,\n  FeedSuccess,\n  EncodedObject,\n  isQueryFailure,\n  isQuerySuccess,\n  QueryOptions,\n  QueryRequest,\n  StreamEvent,\n  StreamEventData,\n  StreamEventStatus,\n  type QuerySuccess,\n  type QueryValue,\n  FeedError,\n} from \"./wire-protocol\";\n\ntype RequiredClientConfig = ClientConfiguration &\n  Required<\n    Pick<\n      ClientConfiguration,\n      | \"client_timeout_buffer_ms\"\n      | \"endpoint\"\n      | \"fetch_keepalive\"\n      | \"http2_max_streams\"\n      | \"http2_session_idle_ms\"\n      | \"secret\"\n      // required default query options\n      | \"format\"\n      | \"long_type\"\n      | \"query_timeout_ms\"\n      | \"max_attempts\"\n      | \"max_backoff\"\n    >\n  >;\n\nconst DEFAULT_CLIENT_CONFIG: Omit<\n  ClientConfiguration & RequiredClientConfig,\n  \"secret\" | \"endpoint\"\n> = {\n  client_timeout_buffer_ms: 5000,\n  format: \"tagged\",\n  http2_session_idle_ms: 5000,\n  http2_max_streams: 100,\n  long_type: \"number\",\n  fetch_keepalive: false,\n  query_timeout_ms: 5000,\n  max_attempts: 3,\n  max_backoff: 20,\n};\n\n/**\n * Client for calling Fauna.\n */\nexport class Client {\n  /** A static copy of the driver env header to send with each request */\n  static readonly #driverEnvHeader = getDriverEnv();\n\n  /** The {@link ClientConfiguration} */\n  readonly #clientConfiguration: RequiredClientConfig;\n  /** The underlying {@link HTTPClient} client. */\n  readonly #httpClient: HTTPClient & Partial<HTTPStreamClient>;\n  /** The last transaction timestamp this client has seen */\n  #lastTxnTs?: number;\n  /** true if this client is closed false otherwise */\n  #isClosed = false;\n\n  /**\n   * Constructs a new {@link Client}.\n   * @param clientConfiguration - the {@link ClientConfiguration} to apply. Defaults to recommended ClientConfiguraiton.\n   * @param httpClient - The underlying {@link HTTPClient} that will execute the actual HTTP calls. Defaults to recommended HTTPClient.\n   * @example\n   * ```typescript\n   *  const myClient = new Client(\n   *   {\n   *     endpoint: endpoints.cloud,\n   *     secret: \"foo\",\n   *     query_timeout_ms: 60_000,\n   *   }\n   * );\n   * ```\n   */\n  constructor(\n    clientConfiguration?: ClientConfiguration,\n    httpClient?: HTTPClient,\n  ) {\n    this.#clientConfiguration = {\n      ...DEFAULT_CLIENT_CONFIG,\n      ...clientConfiguration,\n      secret: this.#getSecret(clientConfiguration),\n      endpoint: this.#getEndpoint(clientConfiguration),\n    };\n\n    this.#validateConfiguration();\n\n    if (!httpClient) {\n      this.#httpClient = getDefaultHTTPClient({\n        url: this.#clientConfiguration.endpoint.toString(),\n        http2_session_idle_ms: this.#clientConfiguration.http2_session_idle_ms,\n        http2_max_streams: this.#clientConfiguration.http2_max_streams,\n        fetch_keepalive: this.#clientConfiguration.fetch_keepalive,\n      });\n    } else {\n      this.#httpClient = httpClient;\n    }\n  }\n\n  /**\n   * @returns the last transaction time seen by this client, or undefined if this client has not seen a transaction time.\n   */\n  get lastTxnTs(): number | undefined {\n    return this.#lastTxnTs;\n  }\n  /**\n   * Sets the last transaction time of this client.\n   * @param ts - the last transaction timestamp to set, as microseconds since\n   *   the epoch. If `ts` is less than the existing `#lastTxnTs` value or is\n   *   undefined , then no change is made.\n   */\n  set lastTxnTs(ts: number | undefined) {\n    if (ts !== undefined) {\n      this.#lastTxnTs = this.#lastTxnTs ? Math.max(ts, this.#lastTxnTs) : ts;\n    }\n  }\n\n  /**\n   * Return the {@link ClientConfiguration} of this client.\n   */\n  get clientConfiguration(): ClientConfiguration {\n    const { ...copy } = this.#clientConfiguration;\n    return copy;\n  }\n\n  /**\n   * Closes the underlying HTTP client. Subsequent query or close calls\n   * will fail.\n   */\n  close() {\n    if (this.#isClosed) {\n      throw new ClientClosedError(\n        \"Your client is closed. You cannot close it again.\",\n      );\n    }\n    this.#httpClient.close();\n    this.#isClosed = true;\n  }\n\n  /**\n   * Creates an iterator to yield pages of data. If additional pages exist, the\n   * iterator will lazily fetch addition pages on each iteration. Pages will\n   * be retried in the event of a ThrottlingError up to the client's configured\n   * max_attempts, inclusive of the initial call.\n   *\n   * @typeParam T - The expected type of the items returned from Fauna on each\n   * iteration. T can be inferred if the provided query used a type parameter.\n   * @param iterable - a {@link Query} or an existing fauna Set ({@link Page} or\n   * {@link EmbeddedSet})\n   * @param options - a {@link QueryOptions} to apply to the queries. Optional.\n   * @returns A {@link SetIterator} that lazily fetches new pages of data on\n   * each iteration\n   *\n   * @example\n   * ```javascript\n   *  const userIterator = await client.paginate(fql`\n   *    Users.all()\n   *  `);\n   *\n   *  for await (const users of userIterator) {\n   *    for (const user of users) {\n   *      // do something with each user\n   *    }\n   *  }\n   * ```\n   *\n   * @example\n   * The {@link SetIterator.flatten} method can be used so the iterator yields\n   * items directly. Each item is fetched asynchronously and hides when\n   * additional pages are fetched.\n   *\n   * ```javascript\n   *  const userIterator = await client.paginate(fql`\n   *    Users.all()\n   *  `);\n   *\n   *  for await (const user of userIterator.flatten()) {\n   *    // do something with each user\n   *  }\n   * ```\n   */\n  paginate<T extends QueryValue>(\n    iterable: Page<T> | EmbeddedSet | Query<T | Page<T>>,\n    options?: QueryOptions,\n  ): SetIterator<T> {\n    if (iterable instanceof Query) {\n      return SetIterator.fromQuery(this, iterable, options);\n    }\n    return SetIterator.fromPageable(this, iterable, options) as SetIterator<T>;\n  }\n\n  /**\n   * Queries Fauna. Queries will be retried in the event of a ThrottlingError up to the client's configured\n   * max_attempts, inclusive of the initial call.\n   *\n   * @typeParam T - The expected type of the response from Fauna. T can be inferred if the\n   *   provided query used a type parameter.\n   * @param query - a {@link Query} to execute in Fauna.\n   *   Note, you can embed header fields in this object; if you do that there's no need to\n   *   pass the headers parameter.\n   * @param options - optional {@link QueryOptions} to apply on top of the request input.\n   *   Values in this headers parameter take precedence over the same values in the {@link ClientConfiguration}.\n   * @returns Promise&lt;{@link QuerySuccess}&gt;.\n   *\n   * @throws {@link ServiceError} Fauna emitted an error. The ServiceError will be\n   *   one of ServiceError's child classes if the error can be further categorized,\n   *   or a concrete ServiceError if it cannot.\n   *   You can use either the type, or the underlying httpStatus + code to determine\n   *   the root cause.\n   * @throws {@link ProtocolError} the client a HTTP error not sent by Fauna.\n   * @throws {@link NetworkError} the client encountered a network issue\n   * connecting to Fauna.\n   * @throws A {@link ClientError} the client fails to submit the request\n   * @throws {@link ClientClosedError} if a query is issued after the client is closed.\n   * due to an internal error.\n   */\n  async query<T extends QueryValue>(\n    query: Query<T>,\n    options?: QueryOptions,\n  ): Promise<QuerySuccess<T>> {\n    if (this.#isClosed) {\n      throw new ClientClosedError(\n        \"Your client is closed. No further requests can be issued.\",\n      );\n    }\n\n    const request: QueryRequest = {\n      query: query.encode(),\n    };\n\n    if (options?.arguments) {\n      request.arguments = TaggedTypeFormat.encode(\n        options.arguments,\n      ) as EncodedObject;\n    }\n\n    return this.#queryWithRetries(request, options);\n  }\n\n  /**\n   * Initialize a streaming request to Fauna\n   * @typeParam T - The expected type of the response from Fauna. T can be inferred\n   *   if the provided query used a type parameter.\n   * @param tokenOrQuery - A string-encoded token for an {@link EventSource}, or a {@link Query}\n   * @returns A {@link StreamClient} that which can be used to listen to a stream\n   *   of events\n   *\n   * @example\n   * ```javascript\n   *  const stream = client.stream(fql`MyCollection.all().eventSource()`)\n   *\n   *  try {\n   *    for await (const event of stream) {\n   *      switch (event.type) {\n   *        case \"update\":\n   *        case \"add\":\n   *        case \"remove\":\n   *          console.log(\"Stream update:\", event);\n   *          // ...\n   *          break;\n   *      }\n   *    }\n   *  } catch (error) {\n   *    // An error will be handled here if Fauna returns a terminal, \"error\" event, or\n   *    // if Fauna returns a non-200 response when trying to connect, or\n   *    // if the max number of retries on network errors is reached.\n   *\n   *    // ... handle fatal error\n   *  };\n   * ```\n   *\n   * @example\n   * ```javascript\n   *  const stream = client.stream(fql`MyCollection.all().eventSource()`)\n   *\n   *  stream.start(\n   *    function onEvent(event) {\n   *      switch (event.type) {\n   *        case \"update\":\n   *        case \"add\":\n   *        case \"remove\":\n   *          console.log(\"Stream update:\", event);\n   *          // ...\n   *          break;\n   *      }\n   *    },\n   *    function onError(error) {\n   *      // An error will be handled here if Fauna returns a terminal, \"error\" event, or\n   *      // if Fauna returns a non-200 response when trying to connect, or\n   *      // if the max number of retries on network errors is reached.\n   *\n   *      // ... handle fatal error\n   *    }\n   *  );\n   * ```\n   */\n  stream<T extends QueryValue>(\n    tokenOrQuery: EventSource | Query<EventSource>,\n    options?: Partial<StreamClientConfiguration>,\n  ): StreamClient<T> {\n    if (this.#isClosed) {\n      throw new ClientClosedError(\n        \"Your client is closed. No further requests can be issued.\",\n      );\n    }\n\n    const streamClient = this.#httpClient;\n\n    if (isStreamClient(streamClient)) {\n      const streamClientConfig: StreamClientConfiguration = {\n        ...this.#clientConfiguration,\n        httpStreamClient: streamClient,\n        ...options,\n      };\n\n      if (\n        streamClientConfig.cursor !== undefined &&\n        tokenOrQuery instanceof Query\n      ) {\n        throw new ClientError(\n          \"The `cursor` configuration can only be used with a stream token.\",\n        );\n      }\n\n      const tokenOrGetToken =\n        tokenOrQuery instanceof Query\n          ? () => this.query<EventSource>(tokenOrQuery).then((res) => res.data)\n          : tokenOrQuery;\n\n      return new StreamClient(tokenOrGetToken, streamClientConfig);\n    } else {\n      throw new ClientError(\"Streaming is not supported by this client.\");\n    }\n  }\n\n  /**\n   * Initialize a event feed in Fauna and returns an asynchronous iterator of\n   * feed events.\n   * @typeParam T - The expected type of the response from Fauna. T can be inferred\n   *   if the provided query used a type parameter.\n   * @param tokenOrQuery - A string-encoded token for an {@link EventSource}, or a {@link Query}\n   * @returns A {@link FeedClient} that which can be used to listen to a feed\n   *   of events\n   *\n   * @example\n   * ```javascript\n   *  const feed = client.feed(fql`MyCollection.all().eventSource()`)\n   *\n   *  try {\n   *    for await (const page of feed) {\n   *      for (const event of page.events) {\n   *        // ... handle event\n   *      }\n   *    }\n   *  } catch (error) {\n   *    // An error will be handled here if Fauna returns a terminal, \"error\" event, or\n   *    // if Fauna returns a non-200 response when trying to connect, or\n   *    // if the max number of retries on network errors is reached.\n   *\n   *    // ... handle fatal error\n   *  };\n   * ```\n   * @example\n   * The {@link FeedClient.flatten} method can be used so the iterator yields\n   * events directly. Each event is fetched asynchronously and hides when\n   * additional pages are fetched.\n   *\n   * ```javascript\n   *  const feed = client.feed(fql`MyCollection.all().eventSource()`)\n   *\n   *  for await (const user of feed.flatten()) {\n   *    // do something with each event\n   *  }\n   * ```\n   */\n  feed<T extends QueryValue>(\n    tokenOrQuery: EventSource | Query<EventSource>,\n    options?: Partial<FeedClientConfiguration>,\n  ): FeedClient<T> {\n    if (this.#isClosed) {\n      throw new ClientClosedError(\n        \"Your client is closed. No further requests can be issued.\",\n      );\n    }\n\n    const clientConfiguration: FeedClientConfiguration = {\n      ...this.#clientConfiguration,\n      httpClient: this.#httpClient,\n      ...options,\n    };\n\n    const tokenOrGetToken =\n      tokenOrQuery instanceof Query\n        ? () => this.query<EventSource>(tokenOrQuery).then((res) => res.data)\n        : tokenOrQuery;\n\n    return new FeedClient(tokenOrGetToken, clientConfiguration);\n  }\n\n  async #queryWithRetries<T extends QueryValue>(\n    queryRequest: QueryRequest,\n    queryOptions?: QueryOptions,\n    attempt = 0,\n  ): Promise<QuerySuccess<T>> {\n    const maxBackoff =\n      this.clientConfiguration.max_backoff ?? DEFAULT_CLIENT_CONFIG.max_backoff;\n    const maxAttempts =\n      this.clientConfiguration.max_attempts ??\n      DEFAULT_CLIENT_CONFIG.max_attempts;\n    const backoffMs =\n      Math.min(Math.random() * 2 ** attempt, maxBackoff) * 1_000;\n\n    attempt += 1;\n\n    try {\n      return await this.#query<T>(queryRequest, queryOptions, attempt);\n    } catch (error) {\n      if (error instanceof ThrottlingError && attempt < maxAttempts) {\n        await wait(backoffMs);\n        return this.#queryWithRetries<T>(queryRequest, queryOptions, attempt);\n      }\n      throw error;\n    }\n  }\n\n  #getError(e: any): ClientError | NetworkError | ProtocolError | ServiceError {\n    // the error was already handled by the driver\n    if (\n      e instanceof ClientError ||\n      e instanceof NetworkError ||\n      e instanceof ProtocolError ||\n      e instanceof ServiceError\n    ) {\n      return e;\n    }\n\n    // the HTTP request succeeded, but there was an error\n    if (isHTTPResponse(e)) {\n      // we got an error from the fauna service\n      if (isQueryFailure(e.body)) {\n        const failure = e.body;\n        const status = e.status;\n        return getServiceError(failure, status);\n      }\n\n      // we got a different error from the protocol layer\n      return new ProtocolError({\n        message: `Response is in an unkown format: ${e.body}`,\n        httpStatus: e.status,\n      });\n    }\n\n    // unknown error\n    return new ClientError(\n      \"A client level error occurred. Fauna was not called.\",\n      {\n        cause: e,\n      },\n    );\n  }\n\n  #getSecret(partialClientConfig?: ClientConfiguration): string {\n    let env_secret = undefined;\n    if (\n      typeof process !== \"undefined\" &&\n      process &&\n      typeof process === \"object\" &&\n      process.env &&\n      typeof process.env === \"object\"\n    ) {\n      env_secret = process.env[\"FAUNA_SECRET\"];\n    }\n\n    const maybeSecret = partialClientConfig?.secret ?? env_secret;\n    if (maybeSecret === undefined) {\n      throw new TypeError(\n        \"You must provide a secret to the driver. Set it \\\nin an environmental variable named FAUNA_SECRET or pass it to the Client\\\n constructor.\",\n      );\n    }\n    return maybeSecret;\n  }\n\n  #getEndpoint(partialClientConfig?: ClientConfiguration): URL {\n    // If the user explicitly sets the endpoint to undefined, we should throw a\n    // TypeError, rather than override with the default endpoint.\n    if (\n      partialClientConfig &&\n      \"endpoint\" in partialClientConfig &&\n      partialClientConfig.endpoint === undefined\n    ) {\n      throw new TypeError(\n        `ClientConfiguration option endpoint must be defined.`,\n      );\n    }\n\n    let env_endpoint: URL | undefined = undefined;\n    if (\n      typeof process !== \"undefined\" &&\n      process &&\n      typeof process === \"object\" &&\n      process.env &&\n      typeof process.env === \"object\"\n    ) {\n      env_endpoint = process.env[\"FAUNA_ENDPOINT\"]\n        ? new URL(process.env[\"FAUNA_ENDPOINT\"])\n        : undefined;\n    }\n\n    return partialClientConfig?.endpoint ?? env_endpoint ?? endpoints.default;\n  }\n\n  async #query<T extends QueryValue>(\n    queryRequest: QueryRequest,\n    queryOptions?: QueryOptions,\n    attempt = 0,\n  ): Promise<QuerySuccess<T>> {\n    try {\n      const requestConfig = {\n        ...this.#clientConfiguration,\n        ...queryOptions,\n      };\n\n      const headers = {\n        Authorization: `Bearer ${requestConfig.secret}`,\n      };\n      this.#setHeaders(requestConfig, headers);\n\n      const isTaggedFormat = requestConfig.format === \"tagged\";\n\n      const client_timeout_ms =\n        requestConfig.query_timeout_ms +\n        this.#clientConfiguration.client_timeout_buffer_ms;\n\n      const response = await this.#httpClient.request({\n        client_timeout_ms,\n        data: queryRequest,\n        headers,\n        method: \"POST\",\n      });\n\n      let parsedResponse;\n      try {\n        parsedResponse = {\n          ...response,\n          body: isTaggedFormat\n            ? TaggedTypeFormat.decode(response.body, {\n                long_type: requestConfig.long_type,\n              })\n            : JSON.parse(response.body),\n        };\n        if (parsedResponse.body.query_tags) {\n          const tags_array = (parsedResponse.body.query_tags as string)\n            .split(\",\")\n            .map((tag) => tag.split(\"=\"));\n          parsedResponse.body.query_tags = Object.fromEntries(tags_array);\n        }\n      } catch (error: unknown) {\n        throw new ProtocolError({\n          message: `Error parsing response as JSON: ${error}`,\n          httpStatus: response.status,\n        });\n      }\n\n      // Response is not from Fauna\n      if (!isQuerySuccess(parsedResponse.body)) {\n        throw this.#getError(parsedResponse);\n      }\n\n      const txn_ts = parsedResponse.body.txn_ts;\n      if (\n        (this.#lastTxnTs === undefined && txn_ts !== undefined) ||\n        (txn_ts !== undefined &&\n          this.#lastTxnTs !== undefined &&\n          this.#lastTxnTs < txn_ts)\n      ) {\n        this.#lastTxnTs = txn_ts;\n      }\n\n      const res = parsedResponse.body as QuerySuccess<T>;\n      if (res.stats) {\n        res.stats.attempts = attempt;\n      }\n      return res;\n    } catch (e: any) {\n      throw this.#getError(e);\n    }\n  }\n\n  #setHeaders(\n    fromObject: QueryOptions,\n    headerObject: Record<string, string | number>,\n  ): void {\n    const setHeader = <V>(\n      header: string,\n      value: V | undefined,\n      transform: (v: V) => string | number = (v) => String(v),\n    ) => {\n      if (value !== undefined) {\n        headerObject[header] = transform(value);\n      }\n    };\n\n    setHeader(\"x-format\", fromObject.format);\n    setHeader(\"x-typecheck\", fromObject.typecheck);\n    setHeader(\"x-query-timeout-ms\", fromObject.query_timeout_ms);\n    setHeader(\"x-linearized\", fromObject.linearized);\n    setHeader(\"x-max-contention-retries\", fromObject.max_contention_retries);\n    setHeader(\"traceparent\", fromObject.traceparent);\n    setHeader(\"x-query-tags\", fromObject.query_tags, (tags) =>\n      Object.entries(tags)\n        .map((tag) => tag.join(\"=\"))\n        .join(\",\"),\n    );\n    setHeader(\"x-last-txn-ts\", this.#lastTxnTs, (v) => v); // x-last-txn-ts doesn't get stringified\n    setHeader(\"x-driver-env\", Client.#driverEnvHeader);\n  }\n\n  #validateConfiguration() {\n    const config = this.#clientConfiguration;\n\n    const required_options: (keyof RequiredClientConfig)[] = [\n      \"client_timeout_buffer_ms\",\n      \"endpoint\",\n      \"format\",\n      \"http2_session_idle_ms\",\n      \"long_type\",\n      \"query_timeout_ms\",\n      \"fetch_keepalive\",\n      \"http2_max_streams\",\n      \"max_backoff\",\n      \"max_attempts\",\n    ];\n    required_options.forEach((option) => {\n      if (config[option] === undefined) {\n        throw new TypeError(\n          `ClientConfiguration option '${option}' must be defined.`,\n        );\n      }\n    });\n\n    if (config.http2_max_streams <= 0) {\n      throw new RangeError(`'http2_max_streams' must be greater than zero.`);\n    }\n\n    if (config.client_timeout_buffer_ms <= 0) {\n      throw new RangeError(\n        `'client_timeout_buffer_ms' must be greater than zero.`,\n      );\n    }\n\n    if (config.query_timeout_ms <= 0) {\n      throw new RangeError(`'query_timeout_ms' must be greater than zero.`);\n    }\n\n    if (config.max_backoff <= 0) {\n      throw new RangeError(`'max_backoff' must be greater than zero.`);\n    }\n\n    if (config.max_attempts <= 0) {\n      throw new RangeError(`'max_attempts' must be greater than zero.`);\n    }\n  }\n}\n\n/**\n * A class to listen to Fauna streams.\n */\nexport class StreamClient<T extends QueryValue = any> {\n  /** Whether or not this stream has been closed */\n  closed = false;\n  /** The stream client options */\n  #clientConfiguration: StreamClientConfiguration;\n  /** A tracker for the number of connection attempts */\n  #connectionAttempts = 0;\n  /** A lambda that returns a promise for a {@link EventSource} */\n  #query: () => Promise<EventSource>;\n  /** The last `txn_ts` value received from events */\n  #last_ts?: number;\n  /** The last `cursor` value received from events */\n  #last_cursor?: string;\n  /** A common interface to operate a stream from any HTTPStreamClient */\n  #streamAdapter?: StreamAdapter;\n  /** A saved copy of the EventSource once received */\n  #eventSource?: EventSource;\n\n  /**\n   *\n   * @param token - A lambda that returns a promise for a {@link EventSource}\n   * @param clientConfiguration - The {@link ClientConfiguration} to apply\n   * @example\n   * ```typescript\n   *  const streamClient = client.stream(eventSource);\n   * ```\n   */\n  constructor(\n    token: EventSource | (() => Promise<EventSource>),\n    clientConfiguration: StreamClientConfiguration,\n  ) {\n    if (isEventSource(token)) {\n      this.#query = () => Promise.resolve(token);\n    } else {\n      this.#query = token;\n    }\n\n    this.#clientConfiguration = clientConfiguration;\n\n    this.#validateConfiguration();\n  }\n\n  /**\n   * A synchronous method to start listening to the stream and handle events\n   * using callbacks.\n   * @param onEvent - A callback function to handle each event\n   * @param onError - An Optional callback function to handle errors. If none is\n   * provided, error will not be handled, and the stream will simply end.\n   */\n  start(\n    onEvent: (event: StreamEventData<T> | StreamEventStatus) => void,\n    onError?: (error: Error) => void,\n  ) {\n    if (typeof onEvent !== \"function\") {\n      throw new TypeError(\n        `Expected a function as the 'onEvent' argument, but received ${typeof onEvent}. Please provide a valid function.`,\n      );\n    }\n    if (onError && typeof onError !== \"function\") {\n      throw new TypeError(\n        `Expected a function as the 'onError' argument, but received ${typeof onError}. Please provide a valid function.`,\n      );\n    }\n    const run = async () => {\n      try {\n        for await (const event of this) {\n          onEvent(event);\n        }\n      } catch (error) {\n        if (onError) {\n          onError(error as Error);\n        }\n      }\n    };\n    run();\n  }\n\n  async *[Symbol.asyncIterator](): AsyncGenerator<\n    StreamEventData<T> | StreamEventStatus\n  > {\n    if (this.closed) {\n      throw new ClientError(\"The stream has been closed and cannot be reused.\");\n    }\n\n    if (!this.#eventSource) {\n      this.#eventSource = await this.#query().then((maybeStreamToken) => {\n        if (!isEventSource(maybeStreamToken)) {\n          throw new ClientError(\n            `Error requesting a stream token. Expected a EventSource as the query result, but received ${typeof maybeStreamToken}. Your query must return the result of '<Set>.eventSource' or '<Set>.eventsOn')\\n` +\n              `Query result: ${JSON.stringify(maybeStreamToken, null)}`,\n          );\n        }\n        return maybeStreamToken;\n      });\n    }\n\n    this.#connectionAttempts = 1;\n    while (!this.closed) {\n      const backoffMs =\n        Math.min(\n          Math.random() * 2 ** this.#connectionAttempts,\n          this.#clientConfiguration.max_backoff,\n        ) * 1_000;\n\n      try {\n        for await (const event of this.#startStream()) {\n          yield event;\n        }\n      } catch (error: any) {\n        if (\n          error instanceof FaunaError ||\n          this.#connectionAttempts >= this.#clientConfiguration.max_attempts\n        ) {\n          // A terminal error from Fauna\n          this.close();\n          throw error;\n        }\n\n        this.#connectionAttempts += 1;\n        await wait(backoffMs);\n      }\n    }\n  }\n\n  close() {\n    if (this.#streamAdapter) {\n      this.#streamAdapter.close();\n      this.#streamAdapter = undefined;\n    }\n    this.closed = true;\n  }\n\n  get last_ts(): number | undefined {\n    return this.#last_ts;\n  }\n\n  async *#startStream(): AsyncGenerator<\n    StreamEventData<T> | StreamEventStatus\n  > {\n    // Safety: This method must only be called after a stream token has been acquired\n    const eventSource = this.#eventSource as EventSource;\n\n    const headers = {\n      Authorization: `Bearer ${this.#clientConfiguration.secret}`,\n    };\n\n    const streamAdapter = this.#clientConfiguration.httpStreamClient.stream({\n      data: {\n        token: eventSource.token,\n        cursor: this.#last_cursor || this.#clientConfiguration.cursor,\n      },\n      headers,\n      method: \"POST\",\n    });\n\n    this.#streamAdapter = streamAdapter;\n\n    for await (const event of streamAdapter.read) {\n      // stream events are always tagged\n      const deserializedEvent: StreamEvent<T> = TaggedTypeFormat.decode(event, {\n        long_type: this.#clientConfiguration.long_type,\n      });\n\n      if (deserializedEvent.type === \"error\") {\n        // Errors sent from Fauna are assumed fatal\n        this.close();\n        throw getServiceError(deserializedEvent);\n      }\n\n      this.#last_ts = deserializedEvent.txn_ts;\n      this.#last_cursor = deserializedEvent.cursor;\n\n      // TODO: remove this once all environments have updated the events to use \"status\" instead of \"start\"\n      if ((deserializedEvent.type as any) === \"start\") {\n        deserializedEvent.type = \"status\";\n      }\n\n      if (\n        !this.#clientConfiguration.status_events &&\n        deserializedEvent.type === \"status\"\n      ) {\n        continue;\n      }\n\n      yield deserializedEvent;\n    }\n  }\n\n  #validateConfiguration() {\n    const config = this.#clientConfiguration;\n\n    const required_options: (keyof StreamClientConfiguration)[] = [\n      \"long_type\",\n      \"httpStreamClient\",\n      \"max_backoff\",\n      \"max_attempts\",\n      \"secret\",\n    ];\n    required_options.forEach((option) => {\n      if (config[option] === undefined) {\n        throw new TypeError(\n          `ClientConfiguration option '${option}' must be defined.`,\n        );\n      }\n    });\n\n    if (config.max_backoff <= 0) {\n      throw new RangeError(`'max_backoff' must be greater than zero.`);\n    }\n\n    if (config.max_attempts <= 0) {\n      throw new RangeError(`'max_attempts' must be greater than zero.`);\n    }\n  }\n}\n\n/**\n * A class to iterate through to a Fauna event feed.\n */\nexport class FeedClient<T extends QueryValue = any> {\n  /** A static copy of the driver env header to send with each request */\n  static readonly #driverEnvHeader = getDriverEnv();\n  /** A lambda that returns a promise for a {@link EventSource} */\n  #query: () => Promise<EventSource>;\n  /** The event feed's client options */\n  #clientConfiguration: FeedClientConfiguration;\n  /** The last `cursor` value received for the current page */\n  #lastCursor?: string;\n  /** A saved copy of the EventSource once received */\n  #eventSource?: EventSource;\n  /** Whether or not another page can be fetched by the client */\n  #isDone?: boolean;\n\n  /**\n   *\n   * @param token - A lambda that returns a promise for a {@link EventSource}\n   * @param clientConfiguration - The {@link FeedClientConfiguration} to apply\n   * @example\n   * ```typescript\n   *  const feed = client.feed(eventSource);\n   * ```\n   */\n  constructor(\n    token: EventSource | (() => Promise<EventSource>),\n    clientConfiguration: FeedClientConfiguration,\n  ) {\n    if (isEventSource(token)) {\n      this.#query = () => Promise.resolve(token);\n    } else {\n      this.#query = token;\n    }\n\n    this.#clientConfiguration = clientConfiguration;\n    this.#lastCursor = clientConfiguration.cursor;\n\n    this.#validateConfiguration();\n  }\n\n  #getHeaders(): Record<string, string> {\n    return {\n      Authorization: `Bearer ${this.#clientConfiguration.secret}`,\n      \"x-format\": \"tagged\",\n      \"x-driver-env\": FeedClient.#driverEnvHeader,\n      \"x-query-timeout-ms\":\n        this.#clientConfiguration.query_timeout_ms.toString(),\n    };\n  }\n\n  async #nextPageHttpRequest() {\n    // If we never resolved the stream token, do it now since we need it here when\n    // building the payload\n    if (!this.#eventSource) {\n      this.#eventSource = await this.#resolveEventSource(this.#query);\n    }\n\n    const headers = this.#getHeaders();\n\n    const req: HTTPRequest<FeedRequest> = {\n      headers,\n      client_timeout_ms:\n        this.#clientConfiguration.client_timeout_buffer_ms +\n        this.#clientConfiguration.query_timeout_ms,\n      data: {\n        token: this.#eventSource.token,\n      },\n      method: \"POST\",\n      path: FaunaAPIPaths.EVENT_FEED,\n    };\n\n    // Set the page size if it is available\n    if (this.#clientConfiguration.page_size) {\n      req.data.page_size = this.#clientConfiguration.page_size;\n    }\n\n    // If we have a cursor, use that. Otherwise, use the start_ts if available.\n    // When the config is validated, if both are set, an error is thrown.\n    if (this.#lastCursor) {\n      req.data.cursor = this.#lastCursor;\n    } else if (this.#clientConfiguration.start_ts) {\n      req.data.start_ts = this.#clientConfiguration.start_ts;\n    }\n\n    return req;\n  }\n\n  async *[Symbol.asyncIterator](): AsyncGenerator<FeedPage<T>> {\n    while (!this.#isDone) {\n      yield await this.nextPage();\n    }\n  }\n\n  /**\n   * Fetches the next page of the event feed. If there are no more pages to\n   * fetch, this method will throw a {@link ClientError}.\n   */\n  async nextPage(): Promise<FeedPage<T>> {\n    if (this.#isDone) {\n      throw new ClientError(\"The event feed has no more pages to fetch.\");\n    }\n\n    const { httpClient } = this.#clientConfiguration;\n\n    const request = await this.#nextPageHttpRequest();\n    const response = await withRetries(() => httpClient.request(request), {\n      maxAttempts: this.#clientConfiguration.max_attempts,\n      maxBackoff: this.#clientConfiguration.max_backoff,\n      shouldRetry: (error) => error instanceof ThrottlingError,\n    });\n\n    let body: FeedSuccess<T> | FeedError;\n\n    try {\n      body = TaggedTypeFormat.decode(response.body, {\n        long_type: this.#clientConfiguration.long_type,\n      });\n    } catch (error: unknown) {\n      throw new ProtocolError({\n        message: `Error parsing response as JSON: ${error}`,\n        httpStatus: response.status,\n      });\n    }\n\n    if (isQueryFailure(body)) {\n      throw getServiceError(body, response.status);\n    }\n\n    const page = new FeedPage<T>(body);\n    this.#lastCursor = page.cursor;\n    this.#isDone = !page.hasNext;\n\n    return page;\n  }\n\n  /**\n   * Returns an async generator that yields the events of the event feed\n   * directly.\n   *\n   * @example\n   * ```javascript\n   *  const feed = client.feed(fql`MyCollection.all().eventSource()`)\n   *\n   *  for await (const user of feed.flatten()) {\n   *    // do something with each event\n   *  }\n   * ```\n   */\n  async *flatten(): AsyncGenerator<StreamEventData<T>> {\n    for await (const page of this) {\n      for (const event of page.events) {\n        yield event;\n      }\n    }\n  }\n\n  async #resolveEventSource(\n    fn: () => Promise<EventSource>,\n  ): Promise<EventSource> {\n    return await fn().then((maybeEventSource) => {\n      if (!isEventSource(maybeEventSource)) {\n        throw new ClientError(\n          `Error requesting a stream token. Expected a EventSource as the query result, but received ${typeof maybeEventSource}. Your query must return the result of '<Set>.eventSource' or '<Set>.eventsOn')\\n` +\n            `Query result: ${JSON.stringify(maybeEventSource, null)}`,\n        );\n      }\n      return maybeEventSource;\n    });\n  }\n\n  #validateConfiguration() {\n    const config = this.#clientConfiguration;\n\n    const required_options: (keyof FeedClientConfiguration)[] = [\n      \"long_type\",\n      \"httpClient\",\n      \"max_backoff\",\n      \"max_attempts\",\n      \"client_timeout_buffer_ms\",\n      \"query_timeout_ms\",\n      \"secret\",\n    ];\n    required_options.forEach((option) => {\n      if (config[option] === undefined) {\n        throw new TypeError(\n          `ClientConfiguration option '${option}' must be defined.`,\n        );\n      }\n    });\n\n    if (config.max_backoff <= 0) {\n      throw new RangeError(`'max_backoff' must be greater than zero.`);\n    }\n\n    if (config.max_attempts <= 0) {\n      throw new RangeError(`'max_attempts' must be greater than zero.`);\n    }\n\n    if (config.query_timeout_ms <= 0) {\n      throw new RangeError(`'query_timeout_ms' must be greater than zero.`);\n    }\n\n    if (config.client_timeout_buffer_ms < 0) {\n      throw new RangeError(\n        `'client_timeout_buffer_ms' must be greater than or equal to zero.`,\n      );\n    }\n\n    if (config.start_ts !== undefined && config.cursor !== undefined) {\n      throw new TypeError(\n        \"Only one of 'start_ts' or 'cursor' can be defined in the client configuration.\",\n      );\n    }\n\n    if (config.cursor !== undefined && typeof config.cursor !== \"string\") {\n      throw new TypeError(\"'cursor' must be a string.\");\n    }\n  }\n}\n\n// Private types and constants for internal logic.\n\nfunction wait(ms: number) {\n  return new Promise((r) => setTimeout(r, ms));\n}\n", "import { Client, fql, FaunaError } from \"fauna\";\n\nexport interface Env {\n  FAUNA_SECRET: string;\n}\n\nexport default {\n  async fetch(\n    request: Request,\n    env: Env,\n    ctx: ExecutionContext\n  ): Promise<Response> {\n    // Extract the method from the request\n    const { method, url } = request;\n\t\tconst { pathname } = new URL(url);\n\n\t\t// Route the request based on path and method\n\n\t\tswitch (method) {\n\t\t\tcase \"GET\":\n\t\t\t\treturn getAllProducts(request, env);\n\t\t\tcase \"POST\":\n\t\t\t\treturn createNewProduct(request, env);\n\t\t\tdefault:\n\t\t\t\treturn new Response(\"Method Not Allowed\", { status: 405 });\n\t\t}\n\t},\n};\n\n/**\n * Get all products from the database\n */\nasync function getAllProducts(request: Request, env: Env): Promise<Response> {\n  // Custom GET logic here (e.g., fetching data from Fauna)\n\tconst client = new Client({ secret: env.FAUNA_SECRET });\n\ttry {\n\t\tconst result = await client.query(fql`\n\t\t\tProduct.all()\n\t\t`);\n\t\treturn new Response(JSON.stringify(result.data));\n\t} catch (error) {\n\t\tif (error instanceof FaunaError) {\n\t\t\treturn new Response(error.message, {status: 500});\n\t\t}\n\t\treturn new Response(\"An error occurred\", { status: 500 });\n\t}\n}\n\n// Handler for POST request\nasync function createNewProduct(request: Request, env: Env): Promise<Response> {\n  // Read and parse the request body\n  const body = await request.json() as any;\n\tconst client = new Client({ secret: env.FAUNA_SECRET });\n\tconst {\n\t\tname,\n\t\tprice,\n\t\tdescription,\n\t\tcategory,\n\t\tstock,\n\t} = body;\n\n\tif (!name || !price || !description || !category || !stock) {\n\t\treturn new Response(\"Missing required fields\", { status: 400 });\n\t}\n\n\ttry {\n\t\t// Custom POST logic here (e.g., storing data to Fauna)\n\t\tconst result = await client.query(fql`\n\t\t\t// Get the category by name. We can use .first() here because we know that the category\n\t\t\t// name is unique.\n\t\t\tlet category = Category.byName(${category}).first()\n\t\t\t// If the category does not exist, abort the transaction.\n\t\t\tif (category == null) abort(\"Category does not exist.\")\n\t\t\t\t// Create the product with the given values.\n\t\t\t\tlet args = { name: ${name}, price: ${price}, stock: ${stock}, description: ${description}, category: category }\n\t\t\t\tlet product: Any = Product.create(args)\n\t\t\t\t// Use projection to only return the fields you need.\n\t\t\t\tproduct {\n\t\t\t\t\tid,\n\t\t\t\t\tname,\n\t\t\t\t\tprice,\n\t\t\t\t\tdescription,\n\t\t\t\t\tstock,\n\t\t\t\t\tcategory {\n\t\t\t\t\t\tid,\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tdescription\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t`);\n\t\treturn new Response(JSON.stringify(result.data));\n\t}\n\tcatch (error) {\n\t\tconsole.error(error);\n\t\treturn new Response(\"An error occurred\", { status: 500 });\n\t}\n}\n\n// Handle dynamic FQL queries\nasync function createDynamicQuery(\n\trequest: Request,\n\tenv: Env,\n\tcollectionName: string\n): Promise<Response> {\n\tconst body = await request.json() as any;\n\tconst {\n\t\toperation,\n\t} = body;\n\n\tswitch (operation) {\n\t\tcase \"create\":\n\t\t\treturn createDocument(collectionName, body, env);\n\t\tcase \"update\":\n\t\t\treturn updateDocument(collectionName, body, env);\n\t\tcase \"delete\":\n\t\t\treturn deleteDocument(collectionName, body, env);\n\t\tdefault:\n\t\t\treturn new Response(\"Invalid operation\", { status: 400 });\n\t}\n}\n\nasync function createDocument(collectionName: string, body: any, env: Env): Promise<Response> {\n  const client = new Client({ secret: env.FAUNA_SECRET });\n  try {\n    // Pass the constructed FQL string inside the `fql` template literal\n    const result = await client.query(fql`\n\t\t\tCollection(${collectionName}).create(${body.fields})\n\t\t`);\n    return new Response(JSON.stringify(result.data));\n  } catch (error) {\n\t\tconsole.error(error);\n    if (error instanceof FaunaError) {\n      return new Response(error.message, { status: 500 });\n    }\n    return new Response(\"An error occurred\", { status: 500 });\n  }\n}\n\n\nasync function updateDocument(collectionName: string, body: any, env: Env): Promise<Response> {\n\tconst client = new Client({ secret: env.FAUNA_SECRET });\n\tconst { id, fields } = body;\n\ttry {\n\t\tconst result = await client.query(fql`\n\t\t\tCollection(${collectionName}).byId(${id}).update(${fields})\n\t\t`);\n\t\treturn new Response(JSON.stringify(result.data));\n\t} catch (error) {\n\t\tif (error instanceof FaunaError) {\n\t\t\treturn new Response(error.message, {status: 500});\n\t\t}\n\t\treturn new Response(\"An error occurred\", { status: 500 });\n\t}\n}\n\nasync function deleteDocument(collectionName: string, body: any, env: Env): Promise<Response> {\n\tconst client = new Client({ secret: env.FAUNA_SECRET });\n\tconst { id } = body;\n\ttry {\n\t\tconst result = await client.query(fql`\n\t\t\tCollection(${collectionName}).byId(${id}).delete()\n\t\t`);\n\t\treturn new Response(JSON.stringify(result.data));\n\t} catch (error) {\n\t\tif (error instanceof FaunaError) {\n\t\t\treturn new Response(error.message, {status: 500});\n\t\t}\n\t\treturn new Response(\"An error occurred\", { status: 500 });\n\t}\n}", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/shadid/Documents/workspace/aws_reinvent/cf-fauna/src/index.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/shadid/Documents/workspace/aws_reinvent/cf-fauna/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/shadid/Documents/workspace/aws_reinvent/cf-fauna/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/shadid/Documents/workspace/aws_reinvent/cf-fauna/src/index.ts\";\n\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/shadid/Documents/workspace/aws_reinvent/cf-fauna/.wrangler/tmp/bundle-IwrVI1/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/shadid/Documents/workspace/aws_reinvent/cf-fauna/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/shadid/Documents/workspace/aws_reinvent/cf-fauna/.wrangler/tmp/bundle-IwrVI1/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/shadid/Documents/workspace/aws_reinvent/cf-fauna/.wrangler/tmp/bundle-IwrVI1/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": ["require_base64_js", "__commonJSMin", "exports", "byteLength", "toByteArray", "fromByteArray", "lookup", "revLookup", "Arr", "code", "i", "len", "getLens", "b64", "validLen", "placeHoldersLen", "lens", "_byteLength", "tmp", "arr", "curByte", "tripletToBase64", "num", "encodeChunk", "uint8", "start", "end", "output", "extraBytes", "parts", "maxChunkLength", "len2", "endpoints", "FaunaError", "args", "ServiceError", "failure", "httpStatus", "info", "QueryRuntimeError", "QueryCheckError", "InvalidRequestError", "ConstraintFailureError", "AbortError", "AuthenticationError", "AuthorizationError", "ContendedTransactionError", "ThrottlingError", "QueryTimeoutError", "ServiceInternalError", "ClientError", "message", "options", "ClientClosedError", "NetworkError", "ProtocolError", "error", "getServiceError", "FaunaAPIPaths", "FetchClient", "#baseUrl", "#defaultRequestPath", "#defaultStreamPath", "#keepalive", "url", "fetch_keepalive", "#resolveURL", "path", "data", "requestHeaders", "method", "client_timeout_ms", "signal", "controller", "response", "status", "responseHeaders", "value", "key", "body", "request", "abortController", "reader", "line", "readLines", "textDecoder", "partOfLine", "chunk", "readChunks", "chunkText", "chunkLines", "done", "readResult", "http2", "_clients", "_http2_session_idle_ms", "_http2_max_streams", "_url", "_numberOfUsers", "_session", "_defaultRequestPath", "_defaultStreamPath", "_getClientKey", "getClientKey_fn", "_closeForAll", "closeForAll_fn", "_connect", "connect_fn", "_doRequest", "doRequest_fn", "_doStream", "doStream_fn", "_NodeHTTP2Client", "http2_session_idle_ms", "http2_max_streams", "__privateAdd", "__privateSet", "httpClientOptions", "_a", "clientKey", "__privateMethod", "__privateGet", "client", "__privateWrapper", "req", "retryCount", "memoizedError", "NodeHTTP2Client", "newSession", "requestData", "resolvePromise", "rejectPromise", "onResponse", "http2ResponseHeaders", "responseData", "httpRequestHeaders", "resolveChunk", "rejectChunk", "setChunkPromise", "res", "rej", "chunkPromise", "s", "self", "chunks", "getDefaultHTTPClient", "nodeHttp2IsSupported", "isHTTPResponse", "isStreamClient", "import_base64_js", "yearpart", "monthpart", "daypart", "hourpart", "minsecpart", "decimalpart", "datesplit", "timesplit", "zonesplit", "plaindate", "startsWithPlaindate", "datetime", "TimeStub", "isoString", "date", "DateStub", "dateString", "matches", "DocumentReference", "coll", "id", "Module", "Document", "obj", "ts", "rest", "NamedDocumentReference", "name", "NamedDocument", "NullDocument", "ref", "cause", "Page", "after", "EmbeddedSet", "SetIterator", "#generator", "initial", "generateFromThunk", "generatePages", "query", "pageable", "FlattenedSetIterator", "setIterator", "generateItems", "currentPage", "fql", "thunk", "result", "page", "item", "isEventSource", "StreamToken", "token", "FeedPage", "events", "cursor", "has_next", "stats", "#toEventIterator", "event", "TaggedTypeFormat", "input", "encode", "encodeInterpolation", "decodeOptions", "_", "modName", "bigInt", "base64toBuffer", "LONG_MIN", "LONG_MAX", "INT_MIN", "INT_MAX", "encodeMap", "wrapped", "_out", "k", "dateValue", "bufferToBase64", "Query", "encodeValueInterpolation", "encodeQueryInterpolation", "encodeArrayInterpolation", "encodeObjectInterpolation", "base64", "queryFragments", "queryArgs", "#queryFragments", "#interpolatedArgs", "#__phantom", "renderedFragments", "fragment", "arg", "encoded", "x", "packageVersion", "os", "getDriverEnv", "driverEnv", "isNode", "isBrowser", "isServiceWorker", "getNodeRuntimeEnv", "getBrowserDetails", "getBrowserOsDetails", "val", "entry", "navigator", "browser", "browserVersion", "nameOffset", "verOffset", "ix", "clientStrings", "cs", "osVersion", "crossGlobal", "detectedEnv", "env", "withRetries", "fn", "maxAttempts", "maxBackoff", "shouldRetry", "attempt", "sleepFn", "backoffMs", "resolve", "isQuerySuccess", "isQueryFailure", "DEFAULT_CLIENT_CONFIG", "_driverEnvHeader", "_clientConfiguration", "_httpClient", "_lastTxnTs", "_isClosed", "_queryWithRetries", "queryWithRetries_fn", "_getError", "getError_fn", "_getSecret", "getSecret_fn", "_getEndpoint", "getEndpoint_fn", "_query", "query_fn", "_setHeaders", "setHeaders_fn", "_validateConfiguration", "validateConfiguration_fn", "_Client", "clientConfiguration", "httpClient", "copy", "iterable", "tokenOrQuery", "streamClient", "streamClientConfig", "tokenOrGetToken", "StreamClient", "FeedClient", "Client", "queryRequest", "queryOptions", "wait", "partialClientConfig", "env_secret", "maybeSecret", "env_endpoint", "requestConfig", "headers", "isTaggedFormat", "parsedResponse", "tags_array", "tag", "txn_ts", "e", "fromObject", "headerObject", "setHeader", "header", "transform", "v", "tags", "config", "option", "#clientConfiguration", "#connectionAttempts", "#query", "#last_ts", "#last_cursor", "#streamAdapter", "#eventSource", "#validateConfiguration", "onEvent", "onError", "maybeStreamToken", "#startStream", "eventSource", "streamAdapter", "deserializedEvent", "_lastCursor", "_eventSource", "_isDone", "_getHeaders", "getHeaders_fn", "_nextPageHttpRequest", "nextPageHttpRequest_fn", "_resolveEventSource", "resolveEventSource_fn", "_FeedClient", "maybeEventSource", "ms", "r"]
}
